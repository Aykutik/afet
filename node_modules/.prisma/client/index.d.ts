
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string | null
  pertcno: string | null
  password: string | null
  email: string | null
  emailVerified: Date | null
  image: string | null
}

/**
 * Model Account
 * 
 */
export type Account = {
  id: string
  userId: string
  type: string
  provider: string
  providerAccountId: string
  refresh_token: string | null
  access_token: string | null
  expires_at: number | null
  token_type: string | null
  scope: string | null
  id_token: string | null
  session_state: string | null
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: string
  sessionToken: string
  userId: string
  expires: Date
}

/**
 * Model destekal
 * 
 */
export type destekal = {
  id: number
  adsoyad: string | null
  tcno: string | null
  telefon: string | null
  adres: string | null
  konu: string | null
  tarih: Date | null
  durum: string | null
  kapand_: number | null
  kapatan: string | null
  kapatanaciklama: string | null
  kapatmatarihi: Date | null
  silindi: number | null
}

/**
 * Model destekol
 * 
 */
export type destekol = {
  id: number
  adsoyad: string | null
  isyeri: string | null
  meslek: string | null
  yas: string | null
  telefon: string | null
  adres: string | null
  konu: string | null
  aciklama: string | null
  tarih: Date | null
  durum: string | null
  kapand_: string | null
  kapatan: string | null
  kapatanaciklama: string | null
  kapatmatarihi: string | null
  silindi: string | null
}

/**
 * Model bilgi_telefon
 * 
 */
export type bilgi_telefon = {
  id: number
  birim: string | null
  telefon: string | null
  aciklama: string | null
  ekleyen: string | null
  eklenmetarihi: string | null
  onay: number | null
}

/**
 * Model bilgi_web
 * 
 */
export type bilgi_web = {
  id: number
  birim: string | null
  web: string | null
  aciklama: string | null
  ekleyen: string | null
  eklenmetarihi: string | null
  onay: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.destekal`: Exposes CRUD operations for the **destekal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Destekals
    * const destekals = await prisma.destekal.findMany()
    * ```
    */
  get destekal(): Prisma.destekalDelegate<GlobalReject>;

  /**
   * `prisma.destekol`: Exposes CRUD operations for the **destekol** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Destekols
    * const destekols = await prisma.destekol.findMany()
    * ```
    */
  get destekol(): Prisma.destekolDelegate<GlobalReject>;

  /**
   * `prisma.bilgi_telefon`: Exposes CRUD operations for the **bilgi_telefon** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bilgi_telefons
    * const bilgi_telefons = await prisma.bilgi_telefon.findMany()
    * ```
    */
  get bilgi_telefon(): Prisma.bilgi_telefonDelegate<GlobalReject>;

  /**
   * `prisma.bilgi_web`: Exposes CRUD operations for the **bilgi_web** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bilgi_webs
    * const bilgi_webs = await prisma.bilgi_web.findMany()
    * ```
    */
  get bilgi_web(): Prisma.bilgi_webDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.10.1
   * Query Engine version: aead147aa326ccb985dcfed5b065b4fdabd44b19
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    Session: 'Session',
    destekal: 'destekal',
    destekol: 'destekol',
    bilgi_telefon: 'bilgi_telefon',
    bilgi_web: 'bilgi_web'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Account: number
    Session: number
  }

  export type UserCountOutputTypeSelect = {
    Account?: boolean
    Session?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    pertcno: string | null
    password: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    pertcno: string | null
    password: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    pertcno: number
    password: number
    email: number
    emailVerified: number
    image: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    pertcno?: true
    password?: true
    email?: true
    emailVerified?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    pertcno?: true
    password?: true
    email?: true
    emailVerified?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    pertcno?: true
    password?: true
    email?: true
    emailVerified?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string | null
    pertcno: string | null
    password: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    pertcno?: boolean
    password?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    Account?: boolean | User$AccountArgs
    Session?: boolean | User$SessionArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    Account?: boolean | User$AccountArgs
    Session?: boolean | User$SessionArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Account' ? Array < AccountGetPayload<S['include'][P]>>  :
        P extends 'Session' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Account' ? Array < AccountGetPayload<S['select'][P]>>  :
        P extends 'Session' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Account<T extends User$AccountArgs= {}>(args?: Subset<T, User$AccountArgs>): Prisma.PrismaPromise<Array<AccountGetPayload<T>>| Null>;

    Session<T extends User$SessionArgs= {}>(args?: Subset<T, User$SessionArgs>): Prisma.PrismaPromise<Array<SessionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Account
   */
  export type User$AccountArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * User.Session
   */
  export type User$SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs = {
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithAggregationInput>
    by: AccountScalarFieldEnum[]
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    User?: boolean | UserArgs
  }


  export type AccountInclude = {
    User?: boolean | UserArgs
  }

  export type AccountGetPayload<S extends boolean | null | undefined | AccountArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Account :
    S extends undefined ? never :
    S extends { include: any } & (AccountArgs | AccountFindManyArgs)
    ? Account  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AccountArgs | AccountFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof Account ? Account[P] : never
  } 
      : Account


  type AccountCountArgs = 
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Account'> extends True ? Prisma__AccountClient<AccountGetPayload<T>> : Prisma__AccountClient<AccountGetPayload<T> | null, null>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Account'> extends True ? Prisma__AccountClient<AccountGetPayload<T>> : Prisma__AccountClient<AccountGetPayload<T> | null, null>

    /**
     * Find the first Account that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs>(
      args?: SelectSubset<T, AccountFindManyArgs>
    ): Prisma.PrismaPromise<Array<AccountGetPayload<T>>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs>(
      args: SelectSubset<T, AccountCreateArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs>(
      args?: SelectSubset<T, AccountCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs>(
      args: SelectSubset<T, AccountDeleteArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs>(
      args: SelectSubset<T, AccountUpdateArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs>(
      args?: SelectSubset<T, AccountDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs>(
      args: SelectSubset<T, AccountUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs>(
      args: SelectSubset<T, AccountUpsertArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Account base type for findUnique actions
   */
  export type AccountFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUnique
   */
  export interface AccountFindUniqueArgs extends AccountFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account base type for findFirst actions
   */
  export type AccountFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }

  /**
   * Account findFirst
   */
  export interface AccountFindFirstArgs extends AccountFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs = {
    /**
     * The data used to create many Accounts.
     */
    data: Enumerable<AccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    User?: boolean | UserArgs
  }


  export type SessionInclude = {
    User?: boolean | UserArgs
  }

  export type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Session :
    S extends undefined ? never :
    S extends { include: any } & (SessionArgs | SessionFindManyArgs)
    ? Session  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SessionArgs | SessionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof Session ? Session[P] : never
  } 
      : Session


  type SessionCountArgs = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): Prisma.PrismaPromise<Array<SessionGetPayload<T>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs extends SessionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs extends SessionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
  }



  /**
   * Model destekal
   */


  export type AggregateDestekal = {
    _count: DestekalCountAggregateOutputType | null
    _avg: DestekalAvgAggregateOutputType | null
    _sum: DestekalSumAggregateOutputType | null
    _min: DestekalMinAggregateOutputType | null
    _max: DestekalMaxAggregateOutputType | null
  }

  export type DestekalAvgAggregateOutputType = {
    id: number | null
    kapand_: number | null
    silindi: number | null
  }

  export type DestekalSumAggregateOutputType = {
    id: number | null
    kapand_: number | null
    silindi: number | null
  }

  export type DestekalMinAggregateOutputType = {
    id: number | null
    adsoyad: string | null
    tcno: string | null
    telefon: string | null
    adres: string | null
    konu: string | null
    tarih: Date | null
    durum: string | null
    kapand_: number | null
    kapatan: string | null
    kapatanaciklama: string | null
    kapatmatarihi: Date | null
    silindi: number | null
  }

  export type DestekalMaxAggregateOutputType = {
    id: number | null
    adsoyad: string | null
    tcno: string | null
    telefon: string | null
    adres: string | null
    konu: string | null
    tarih: Date | null
    durum: string | null
    kapand_: number | null
    kapatan: string | null
    kapatanaciklama: string | null
    kapatmatarihi: Date | null
    silindi: number | null
  }

  export type DestekalCountAggregateOutputType = {
    id: number
    adsoyad: number
    tcno: number
    telefon: number
    adres: number
    konu: number
    tarih: number
    durum: number
    kapand_: number
    kapatan: number
    kapatanaciklama: number
    kapatmatarihi: number
    silindi: number
    _all: number
  }


  export type DestekalAvgAggregateInputType = {
    id?: true
    kapand_?: true
    silindi?: true
  }

  export type DestekalSumAggregateInputType = {
    id?: true
    kapand_?: true
    silindi?: true
  }

  export type DestekalMinAggregateInputType = {
    id?: true
    adsoyad?: true
    tcno?: true
    telefon?: true
    adres?: true
    konu?: true
    tarih?: true
    durum?: true
    kapand_?: true
    kapatan?: true
    kapatanaciklama?: true
    kapatmatarihi?: true
    silindi?: true
  }

  export type DestekalMaxAggregateInputType = {
    id?: true
    adsoyad?: true
    tcno?: true
    telefon?: true
    adres?: true
    konu?: true
    tarih?: true
    durum?: true
    kapand_?: true
    kapatan?: true
    kapatanaciklama?: true
    kapatmatarihi?: true
    silindi?: true
  }

  export type DestekalCountAggregateInputType = {
    id?: true
    adsoyad?: true
    tcno?: true
    telefon?: true
    adres?: true
    konu?: true
    tarih?: true
    durum?: true
    kapand_?: true
    kapatan?: true
    kapatanaciklama?: true
    kapatmatarihi?: true
    silindi?: true
    _all?: true
  }

  export type DestekalAggregateArgs = {
    /**
     * Filter which destekal to aggregate.
     */
    where?: destekalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of destekals to fetch.
     */
    orderBy?: Enumerable<destekalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: destekalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` destekals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` destekals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned destekals
    **/
    _count?: true | DestekalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DestekalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DestekalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DestekalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DestekalMaxAggregateInputType
  }

  export type GetDestekalAggregateType<T extends DestekalAggregateArgs> = {
        [P in keyof T & keyof AggregateDestekal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDestekal[P]>
      : GetScalarType<T[P], AggregateDestekal[P]>
  }




  export type DestekalGroupByArgs = {
    where?: destekalWhereInput
    orderBy?: Enumerable<destekalOrderByWithAggregationInput>
    by: DestekalScalarFieldEnum[]
    having?: destekalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DestekalCountAggregateInputType | true
    _avg?: DestekalAvgAggregateInputType
    _sum?: DestekalSumAggregateInputType
    _min?: DestekalMinAggregateInputType
    _max?: DestekalMaxAggregateInputType
  }


  export type DestekalGroupByOutputType = {
    id: number
    adsoyad: string | null
    tcno: string | null
    telefon: string | null
    adres: string | null
    konu: string | null
    tarih: Date | null
    durum: string | null
    kapand_: number | null
    kapatan: string | null
    kapatanaciklama: string | null
    kapatmatarihi: Date | null
    silindi: number | null
    _count: DestekalCountAggregateOutputType | null
    _avg: DestekalAvgAggregateOutputType | null
    _sum: DestekalSumAggregateOutputType | null
    _min: DestekalMinAggregateOutputType | null
    _max: DestekalMaxAggregateOutputType | null
  }

  type GetDestekalGroupByPayload<T extends DestekalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DestekalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DestekalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DestekalGroupByOutputType[P]>
            : GetScalarType<T[P], DestekalGroupByOutputType[P]>
        }
      >
    >


  export type destekalSelect = {
    id?: boolean
    adsoyad?: boolean
    tcno?: boolean
    telefon?: boolean
    adres?: boolean
    konu?: boolean
    tarih?: boolean
    durum?: boolean
    kapand_?: boolean
    kapatan?: boolean
    kapatanaciklama?: boolean
    kapatmatarihi?: boolean
    silindi?: boolean
  }


  export type destekalGetPayload<S extends boolean | null | undefined | destekalArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? destekal :
    S extends undefined ? never :
    S extends { include: any } & (destekalArgs | destekalFindManyArgs)
    ? destekal 
    : S extends { select: any } & (destekalArgs | destekalFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof destekal ? destekal[P] : never
  } 
      : destekal


  type destekalCountArgs = 
    Omit<destekalFindManyArgs, 'select' | 'include'> & {
      select?: DestekalCountAggregateInputType | true
    }

  export interface destekalDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Destekal that matches the filter.
     * @param {destekalFindUniqueArgs} args - Arguments to find a Destekal
     * @example
     * // Get one Destekal
     * const destekal = await prisma.destekal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends destekalFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, destekalFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'destekal'> extends True ? Prisma__destekalClient<destekalGetPayload<T>> : Prisma__destekalClient<destekalGetPayload<T> | null, null>

    /**
     * Find one Destekal that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {destekalFindUniqueOrThrowArgs} args - Arguments to find a Destekal
     * @example
     * // Get one Destekal
     * const destekal = await prisma.destekal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends destekalFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, destekalFindUniqueOrThrowArgs>
    ): Prisma__destekalClient<destekalGetPayload<T>>

    /**
     * Find the first Destekal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {destekalFindFirstArgs} args - Arguments to find a Destekal
     * @example
     * // Get one Destekal
     * const destekal = await prisma.destekal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends destekalFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, destekalFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'destekal'> extends True ? Prisma__destekalClient<destekalGetPayload<T>> : Prisma__destekalClient<destekalGetPayload<T> | null, null>

    /**
     * Find the first Destekal that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {destekalFindFirstOrThrowArgs} args - Arguments to find a Destekal
     * @example
     * // Get one Destekal
     * const destekal = await prisma.destekal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends destekalFindFirstOrThrowArgs>(
      args?: SelectSubset<T, destekalFindFirstOrThrowArgs>
    ): Prisma__destekalClient<destekalGetPayload<T>>

    /**
     * Find zero or more Destekals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {destekalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Destekals
     * const destekals = await prisma.destekal.findMany()
     * 
     * // Get first 10 Destekals
     * const destekals = await prisma.destekal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const destekalWithIdOnly = await prisma.destekal.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends destekalFindManyArgs>(
      args?: SelectSubset<T, destekalFindManyArgs>
    ): Prisma.PrismaPromise<Array<destekalGetPayload<T>>>

    /**
     * Create a Destekal.
     * @param {destekalCreateArgs} args - Arguments to create a Destekal.
     * @example
     * // Create one Destekal
     * const Destekal = await prisma.destekal.create({
     *   data: {
     *     // ... data to create a Destekal
     *   }
     * })
     * 
    **/
    create<T extends destekalCreateArgs>(
      args: SelectSubset<T, destekalCreateArgs>
    ): Prisma__destekalClient<destekalGetPayload<T>>

    /**
     * Create many Destekals.
     *     @param {destekalCreateManyArgs} args - Arguments to create many Destekals.
     *     @example
     *     // Create many Destekals
     *     const destekal = await prisma.destekal.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends destekalCreateManyArgs>(
      args?: SelectSubset<T, destekalCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Destekal.
     * @param {destekalDeleteArgs} args - Arguments to delete one Destekal.
     * @example
     * // Delete one Destekal
     * const Destekal = await prisma.destekal.delete({
     *   where: {
     *     // ... filter to delete one Destekal
     *   }
     * })
     * 
    **/
    delete<T extends destekalDeleteArgs>(
      args: SelectSubset<T, destekalDeleteArgs>
    ): Prisma__destekalClient<destekalGetPayload<T>>

    /**
     * Update one Destekal.
     * @param {destekalUpdateArgs} args - Arguments to update one Destekal.
     * @example
     * // Update one Destekal
     * const destekal = await prisma.destekal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends destekalUpdateArgs>(
      args: SelectSubset<T, destekalUpdateArgs>
    ): Prisma__destekalClient<destekalGetPayload<T>>

    /**
     * Delete zero or more Destekals.
     * @param {destekalDeleteManyArgs} args - Arguments to filter Destekals to delete.
     * @example
     * // Delete a few Destekals
     * const { count } = await prisma.destekal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends destekalDeleteManyArgs>(
      args?: SelectSubset<T, destekalDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Destekals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {destekalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Destekals
     * const destekal = await prisma.destekal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends destekalUpdateManyArgs>(
      args: SelectSubset<T, destekalUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Destekal.
     * @param {destekalUpsertArgs} args - Arguments to update or create a Destekal.
     * @example
     * // Update or create a Destekal
     * const destekal = await prisma.destekal.upsert({
     *   create: {
     *     // ... data to create a Destekal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Destekal we want to update
     *   }
     * })
    **/
    upsert<T extends destekalUpsertArgs>(
      args: SelectSubset<T, destekalUpsertArgs>
    ): Prisma__destekalClient<destekalGetPayload<T>>

    /**
     * Count the number of Destekals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {destekalCountArgs} args - Arguments to filter Destekals to count.
     * @example
     * // Count the number of Destekals
     * const count = await prisma.destekal.count({
     *   where: {
     *     // ... the filter for the Destekals we want to count
     *   }
     * })
    **/
    count<T extends destekalCountArgs>(
      args?: Subset<T, destekalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DestekalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Destekal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestekalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DestekalAggregateArgs>(args: Subset<T, DestekalAggregateArgs>): Prisma.PrismaPromise<GetDestekalAggregateType<T>>

    /**
     * Group by Destekal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestekalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DestekalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DestekalGroupByArgs['orderBy'] }
        : { orderBy?: DestekalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DestekalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDestekalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for destekal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__destekalClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * destekal base type for findUnique actions
   */
  export type destekalFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the destekal
     */
    select?: destekalSelect | null
    /**
     * Filter, which destekal to fetch.
     */
    where: destekalWhereUniqueInput
  }

  /**
   * destekal findUnique
   */
  export interface destekalFindUniqueArgs extends destekalFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * destekal findUniqueOrThrow
   */
  export type destekalFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the destekal
     */
    select?: destekalSelect | null
    /**
     * Filter, which destekal to fetch.
     */
    where: destekalWhereUniqueInput
  }


  /**
   * destekal base type for findFirst actions
   */
  export type destekalFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the destekal
     */
    select?: destekalSelect | null
    /**
     * Filter, which destekal to fetch.
     */
    where?: destekalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of destekals to fetch.
     */
    orderBy?: Enumerable<destekalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for destekals.
     */
    cursor?: destekalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` destekals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` destekals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of destekals.
     */
    distinct?: Enumerable<DestekalScalarFieldEnum>
  }

  /**
   * destekal findFirst
   */
  export interface destekalFindFirstArgs extends destekalFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * destekal findFirstOrThrow
   */
  export type destekalFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the destekal
     */
    select?: destekalSelect | null
    /**
     * Filter, which destekal to fetch.
     */
    where?: destekalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of destekals to fetch.
     */
    orderBy?: Enumerable<destekalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for destekals.
     */
    cursor?: destekalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` destekals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` destekals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of destekals.
     */
    distinct?: Enumerable<DestekalScalarFieldEnum>
  }


  /**
   * destekal findMany
   */
  export type destekalFindManyArgs = {
    /**
     * Select specific fields to fetch from the destekal
     */
    select?: destekalSelect | null
    /**
     * Filter, which destekals to fetch.
     */
    where?: destekalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of destekals to fetch.
     */
    orderBy?: Enumerable<destekalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing destekals.
     */
    cursor?: destekalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` destekals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` destekals.
     */
    skip?: number
    distinct?: Enumerable<DestekalScalarFieldEnum>
  }


  /**
   * destekal create
   */
  export type destekalCreateArgs = {
    /**
     * Select specific fields to fetch from the destekal
     */
    select?: destekalSelect | null
    /**
     * The data needed to create a destekal.
     */
    data: XOR<destekalCreateInput, destekalUncheckedCreateInput>
  }


  /**
   * destekal createMany
   */
  export type destekalCreateManyArgs = {
    /**
     * The data used to create many destekals.
     */
    data: Enumerable<destekalCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * destekal update
   */
  export type destekalUpdateArgs = {
    /**
     * Select specific fields to fetch from the destekal
     */
    select?: destekalSelect | null
    /**
     * The data needed to update a destekal.
     */
    data: XOR<destekalUpdateInput, destekalUncheckedUpdateInput>
    /**
     * Choose, which destekal to update.
     */
    where: destekalWhereUniqueInput
  }


  /**
   * destekal updateMany
   */
  export type destekalUpdateManyArgs = {
    /**
     * The data used to update destekals.
     */
    data: XOR<destekalUpdateManyMutationInput, destekalUncheckedUpdateManyInput>
    /**
     * Filter which destekals to update
     */
    where?: destekalWhereInput
  }


  /**
   * destekal upsert
   */
  export type destekalUpsertArgs = {
    /**
     * Select specific fields to fetch from the destekal
     */
    select?: destekalSelect | null
    /**
     * The filter to search for the destekal to update in case it exists.
     */
    where: destekalWhereUniqueInput
    /**
     * In case the destekal found by the `where` argument doesn't exist, create a new destekal with this data.
     */
    create: XOR<destekalCreateInput, destekalUncheckedCreateInput>
    /**
     * In case the destekal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<destekalUpdateInput, destekalUncheckedUpdateInput>
  }


  /**
   * destekal delete
   */
  export type destekalDeleteArgs = {
    /**
     * Select specific fields to fetch from the destekal
     */
    select?: destekalSelect | null
    /**
     * Filter which destekal to delete.
     */
    where: destekalWhereUniqueInput
  }


  /**
   * destekal deleteMany
   */
  export type destekalDeleteManyArgs = {
    /**
     * Filter which destekals to delete
     */
    where?: destekalWhereInput
  }


  /**
   * destekal without action
   */
  export type destekalArgs = {
    /**
     * Select specific fields to fetch from the destekal
     */
    select?: destekalSelect | null
  }



  /**
   * Model destekol
   */


  export type AggregateDestekol = {
    _count: DestekolCountAggregateOutputType | null
    _avg: DestekolAvgAggregateOutputType | null
    _sum: DestekolSumAggregateOutputType | null
    _min: DestekolMinAggregateOutputType | null
    _max: DestekolMaxAggregateOutputType | null
  }

  export type DestekolAvgAggregateOutputType = {
    id: number | null
  }

  export type DestekolSumAggregateOutputType = {
    id: number | null
  }

  export type DestekolMinAggregateOutputType = {
    id: number | null
    adsoyad: string | null
    isyeri: string | null
    meslek: string | null
    yas: string | null
    telefon: string | null
    adres: string | null
    konu: string | null
    aciklama: string | null
    tarih: Date | null
    durum: string | null
    kapand_: string | null
    kapatan: string | null
    kapatanaciklama: string | null
    kapatmatarihi: string | null
    silindi: string | null
  }

  export type DestekolMaxAggregateOutputType = {
    id: number | null
    adsoyad: string | null
    isyeri: string | null
    meslek: string | null
    yas: string | null
    telefon: string | null
    adres: string | null
    konu: string | null
    aciklama: string | null
    tarih: Date | null
    durum: string | null
    kapand_: string | null
    kapatan: string | null
    kapatanaciklama: string | null
    kapatmatarihi: string | null
    silindi: string | null
  }

  export type DestekolCountAggregateOutputType = {
    id: number
    adsoyad: number
    isyeri: number
    meslek: number
    yas: number
    telefon: number
    adres: number
    konu: number
    aciklama: number
    tarih: number
    durum: number
    kapand_: number
    kapatan: number
    kapatanaciklama: number
    kapatmatarihi: number
    silindi: number
    _all: number
  }


  export type DestekolAvgAggregateInputType = {
    id?: true
  }

  export type DestekolSumAggregateInputType = {
    id?: true
  }

  export type DestekolMinAggregateInputType = {
    id?: true
    adsoyad?: true
    isyeri?: true
    meslek?: true
    yas?: true
    telefon?: true
    adres?: true
    konu?: true
    aciklama?: true
    tarih?: true
    durum?: true
    kapand_?: true
    kapatan?: true
    kapatanaciklama?: true
    kapatmatarihi?: true
    silindi?: true
  }

  export type DestekolMaxAggregateInputType = {
    id?: true
    adsoyad?: true
    isyeri?: true
    meslek?: true
    yas?: true
    telefon?: true
    adres?: true
    konu?: true
    aciklama?: true
    tarih?: true
    durum?: true
    kapand_?: true
    kapatan?: true
    kapatanaciklama?: true
    kapatmatarihi?: true
    silindi?: true
  }

  export type DestekolCountAggregateInputType = {
    id?: true
    adsoyad?: true
    isyeri?: true
    meslek?: true
    yas?: true
    telefon?: true
    adres?: true
    konu?: true
    aciklama?: true
    tarih?: true
    durum?: true
    kapand_?: true
    kapatan?: true
    kapatanaciklama?: true
    kapatmatarihi?: true
    silindi?: true
    _all?: true
  }

  export type DestekolAggregateArgs = {
    /**
     * Filter which destekol to aggregate.
     */
    where?: destekolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of destekols to fetch.
     */
    orderBy?: Enumerable<destekolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: destekolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` destekols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` destekols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned destekols
    **/
    _count?: true | DestekolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DestekolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DestekolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DestekolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DestekolMaxAggregateInputType
  }

  export type GetDestekolAggregateType<T extends DestekolAggregateArgs> = {
        [P in keyof T & keyof AggregateDestekol]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDestekol[P]>
      : GetScalarType<T[P], AggregateDestekol[P]>
  }




  export type DestekolGroupByArgs = {
    where?: destekolWhereInput
    orderBy?: Enumerable<destekolOrderByWithAggregationInput>
    by: DestekolScalarFieldEnum[]
    having?: destekolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DestekolCountAggregateInputType | true
    _avg?: DestekolAvgAggregateInputType
    _sum?: DestekolSumAggregateInputType
    _min?: DestekolMinAggregateInputType
    _max?: DestekolMaxAggregateInputType
  }


  export type DestekolGroupByOutputType = {
    id: number
    adsoyad: string | null
    isyeri: string | null
    meslek: string | null
    yas: string | null
    telefon: string | null
    adres: string | null
    konu: string | null
    aciklama: string | null
    tarih: Date | null
    durum: string | null
    kapand_: string | null
    kapatan: string | null
    kapatanaciklama: string | null
    kapatmatarihi: string | null
    silindi: string | null
    _count: DestekolCountAggregateOutputType | null
    _avg: DestekolAvgAggregateOutputType | null
    _sum: DestekolSumAggregateOutputType | null
    _min: DestekolMinAggregateOutputType | null
    _max: DestekolMaxAggregateOutputType | null
  }

  type GetDestekolGroupByPayload<T extends DestekolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DestekolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DestekolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DestekolGroupByOutputType[P]>
            : GetScalarType<T[P], DestekolGroupByOutputType[P]>
        }
      >
    >


  export type destekolSelect = {
    id?: boolean
    adsoyad?: boolean
    isyeri?: boolean
    meslek?: boolean
    yas?: boolean
    telefon?: boolean
    adres?: boolean
    konu?: boolean
    aciklama?: boolean
    tarih?: boolean
    durum?: boolean
    kapand_?: boolean
    kapatan?: boolean
    kapatanaciklama?: boolean
    kapatmatarihi?: boolean
    silindi?: boolean
  }


  export type destekolGetPayload<S extends boolean | null | undefined | destekolArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? destekol :
    S extends undefined ? never :
    S extends { include: any } & (destekolArgs | destekolFindManyArgs)
    ? destekol 
    : S extends { select: any } & (destekolArgs | destekolFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof destekol ? destekol[P] : never
  } 
      : destekol


  type destekolCountArgs = 
    Omit<destekolFindManyArgs, 'select' | 'include'> & {
      select?: DestekolCountAggregateInputType | true
    }

  export interface destekolDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Destekol that matches the filter.
     * @param {destekolFindUniqueArgs} args - Arguments to find a Destekol
     * @example
     * // Get one Destekol
     * const destekol = await prisma.destekol.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends destekolFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, destekolFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'destekol'> extends True ? Prisma__destekolClient<destekolGetPayload<T>> : Prisma__destekolClient<destekolGetPayload<T> | null, null>

    /**
     * Find one Destekol that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {destekolFindUniqueOrThrowArgs} args - Arguments to find a Destekol
     * @example
     * // Get one Destekol
     * const destekol = await prisma.destekol.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends destekolFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, destekolFindUniqueOrThrowArgs>
    ): Prisma__destekolClient<destekolGetPayload<T>>

    /**
     * Find the first Destekol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {destekolFindFirstArgs} args - Arguments to find a Destekol
     * @example
     * // Get one Destekol
     * const destekol = await prisma.destekol.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends destekolFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, destekolFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'destekol'> extends True ? Prisma__destekolClient<destekolGetPayload<T>> : Prisma__destekolClient<destekolGetPayload<T> | null, null>

    /**
     * Find the first Destekol that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {destekolFindFirstOrThrowArgs} args - Arguments to find a Destekol
     * @example
     * // Get one Destekol
     * const destekol = await prisma.destekol.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends destekolFindFirstOrThrowArgs>(
      args?: SelectSubset<T, destekolFindFirstOrThrowArgs>
    ): Prisma__destekolClient<destekolGetPayload<T>>

    /**
     * Find zero or more Destekols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {destekolFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Destekols
     * const destekols = await prisma.destekol.findMany()
     * 
     * // Get first 10 Destekols
     * const destekols = await prisma.destekol.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const destekolWithIdOnly = await prisma.destekol.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends destekolFindManyArgs>(
      args?: SelectSubset<T, destekolFindManyArgs>
    ): Prisma.PrismaPromise<Array<destekolGetPayload<T>>>

    /**
     * Create a Destekol.
     * @param {destekolCreateArgs} args - Arguments to create a Destekol.
     * @example
     * // Create one Destekol
     * const Destekol = await prisma.destekol.create({
     *   data: {
     *     // ... data to create a Destekol
     *   }
     * })
     * 
    **/
    create<T extends destekolCreateArgs>(
      args: SelectSubset<T, destekolCreateArgs>
    ): Prisma__destekolClient<destekolGetPayload<T>>

    /**
     * Create many Destekols.
     *     @param {destekolCreateManyArgs} args - Arguments to create many Destekols.
     *     @example
     *     // Create many Destekols
     *     const destekol = await prisma.destekol.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends destekolCreateManyArgs>(
      args?: SelectSubset<T, destekolCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Destekol.
     * @param {destekolDeleteArgs} args - Arguments to delete one Destekol.
     * @example
     * // Delete one Destekol
     * const Destekol = await prisma.destekol.delete({
     *   where: {
     *     // ... filter to delete one Destekol
     *   }
     * })
     * 
    **/
    delete<T extends destekolDeleteArgs>(
      args: SelectSubset<T, destekolDeleteArgs>
    ): Prisma__destekolClient<destekolGetPayload<T>>

    /**
     * Update one Destekol.
     * @param {destekolUpdateArgs} args - Arguments to update one Destekol.
     * @example
     * // Update one Destekol
     * const destekol = await prisma.destekol.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends destekolUpdateArgs>(
      args: SelectSubset<T, destekolUpdateArgs>
    ): Prisma__destekolClient<destekolGetPayload<T>>

    /**
     * Delete zero or more Destekols.
     * @param {destekolDeleteManyArgs} args - Arguments to filter Destekols to delete.
     * @example
     * // Delete a few Destekols
     * const { count } = await prisma.destekol.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends destekolDeleteManyArgs>(
      args?: SelectSubset<T, destekolDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Destekols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {destekolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Destekols
     * const destekol = await prisma.destekol.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends destekolUpdateManyArgs>(
      args: SelectSubset<T, destekolUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Destekol.
     * @param {destekolUpsertArgs} args - Arguments to update or create a Destekol.
     * @example
     * // Update or create a Destekol
     * const destekol = await prisma.destekol.upsert({
     *   create: {
     *     // ... data to create a Destekol
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Destekol we want to update
     *   }
     * })
    **/
    upsert<T extends destekolUpsertArgs>(
      args: SelectSubset<T, destekolUpsertArgs>
    ): Prisma__destekolClient<destekolGetPayload<T>>

    /**
     * Count the number of Destekols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {destekolCountArgs} args - Arguments to filter Destekols to count.
     * @example
     * // Count the number of Destekols
     * const count = await prisma.destekol.count({
     *   where: {
     *     // ... the filter for the Destekols we want to count
     *   }
     * })
    **/
    count<T extends destekolCountArgs>(
      args?: Subset<T, destekolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DestekolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Destekol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestekolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DestekolAggregateArgs>(args: Subset<T, DestekolAggregateArgs>): Prisma.PrismaPromise<GetDestekolAggregateType<T>>

    /**
     * Group by Destekol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestekolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DestekolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DestekolGroupByArgs['orderBy'] }
        : { orderBy?: DestekolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DestekolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDestekolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for destekol.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__destekolClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * destekol base type for findUnique actions
   */
  export type destekolFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the destekol
     */
    select?: destekolSelect | null
    /**
     * Filter, which destekol to fetch.
     */
    where: destekolWhereUniqueInput
  }

  /**
   * destekol findUnique
   */
  export interface destekolFindUniqueArgs extends destekolFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * destekol findUniqueOrThrow
   */
  export type destekolFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the destekol
     */
    select?: destekolSelect | null
    /**
     * Filter, which destekol to fetch.
     */
    where: destekolWhereUniqueInput
  }


  /**
   * destekol base type for findFirst actions
   */
  export type destekolFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the destekol
     */
    select?: destekolSelect | null
    /**
     * Filter, which destekol to fetch.
     */
    where?: destekolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of destekols to fetch.
     */
    orderBy?: Enumerable<destekolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for destekols.
     */
    cursor?: destekolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` destekols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` destekols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of destekols.
     */
    distinct?: Enumerable<DestekolScalarFieldEnum>
  }

  /**
   * destekol findFirst
   */
  export interface destekolFindFirstArgs extends destekolFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * destekol findFirstOrThrow
   */
  export type destekolFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the destekol
     */
    select?: destekolSelect | null
    /**
     * Filter, which destekol to fetch.
     */
    where?: destekolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of destekols to fetch.
     */
    orderBy?: Enumerable<destekolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for destekols.
     */
    cursor?: destekolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` destekols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` destekols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of destekols.
     */
    distinct?: Enumerable<DestekolScalarFieldEnum>
  }


  /**
   * destekol findMany
   */
  export type destekolFindManyArgs = {
    /**
     * Select specific fields to fetch from the destekol
     */
    select?: destekolSelect | null
    /**
     * Filter, which destekols to fetch.
     */
    where?: destekolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of destekols to fetch.
     */
    orderBy?: Enumerable<destekolOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing destekols.
     */
    cursor?: destekolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` destekols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` destekols.
     */
    skip?: number
    distinct?: Enumerable<DestekolScalarFieldEnum>
  }


  /**
   * destekol create
   */
  export type destekolCreateArgs = {
    /**
     * Select specific fields to fetch from the destekol
     */
    select?: destekolSelect | null
    /**
     * The data needed to create a destekol.
     */
    data: XOR<destekolCreateInput, destekolUncheckedCreateInput>
  }


  /**
   * destekol createMany
   */
  export type destekolCreateManyArgs = {
    /**
     * The data used to create many destekols.
     */
    data: Enumerable<destekolCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * destekol update
   */
  export type destekolUpdateArgs = {
    /**
     * Select specific fields to fetch from the destekol
     */
    select?: destekolSelect | null
    /**
     * The data needed to update a destekol.
     */
    data: XOR<destekolUpdateInput, destekolUncheckedUpdateInput>
    /**
     * Choose, which destekol to update.
     */
    where: destekolWhereUniqueInput
  }


  /**
   * destekol updateMany
   */
  export type destekolUpdateManyArgs = {
    /**
     * The data used to update destekols.
     */
    data: XOR<destekolUpdateManyMutationInput, destekolUncheckedUpdateManyInput>
    /**
     * Filter which destekols to update
     */
    where?: destekolWhereInput
  }


  /**
   * destekol upsert
   */
  export type destekolUpsertArgs = {
    /**
     * Select specific fields to fetch from the destekol
     */
    select?: destekolSelect | null
    /**
     * The filter to search for the destekol to update in case it exists.
     */
    where: destekolWhereUniqueInput
    /**
     * In case the destekol found by the `where` argument doesn't exist, create a new destekol with this data.
     */
    create: XOR<destekolCreateInput, destekolUncheckedCreateInput>
    /**
     * In case the destekol was found with the provided `where` argument, update it with this data.
     */
    update: XOR<destekolUpdateInput, destekolUncheckedUpdateInput>
  }


  /**
   * destekol delete
   */
  export type destekolDeleteArgs = {
    /**
     * Select specific fields to fetch from the destekol
     */
    select?: destekolSelect | null
    /**
     * Filter which destekol to delete.
     */
    where: destekolWhereUniqueInput
  }


  /**
   * destekol deleteMany
   */
  export type destekolDeleteManyArgs = {
    /**
     * Filter which destekols to delete
     */
    where?: destekolWhereInput
  }


  /**
   * destekol without action
   */
  export type destekolArgs = {
    /**
     * Select specific fields to fetch from the destekol
     */
    select?: destekolSelect | null
  }



  /**
   * Model bilgi_telefon
   */


  export type AggregateBilgi_telefon = {
    _count: Bilgi_telefonCountAggregateOutputType | null
    _avg: Bilgi_telefonAvgAggregateOutputType | null
    _sum: Bilgi_telefonSumAggregateOutputType | null
    _min: Bilgi_telefonMinAggregateOutputType | null
    _max: Bilgi_telefonMaxAggregateOutputType | null
  }

  export type Bilgi_telefonAvgAggregateOutputType = {
    id: number | null
    onay: number | null
  }

  export type Bilgi_telefonSumAggregateOutputType = {
    id: number | null
    onay: number | null
  }

  export type Bilgi_telefonMinAggregateOutputType = {
    id: number | null
    birim: string | null
    telefon: string | null
    aciklama: string | null
    ekleyen: string | null
    eklenmetarihi: string | null
    onay: number | null
  }

  export type Bilgi_telefonMaxAggregateOutputType = {
    id: number | null
    birim: string | null
    telefon: string | null
    aciklama: string | null
    ekleyen: string | null
    eklenmetarihi: string | null
    onay: number | null
  }

  export type Bilgi_telefonCountAggregateOutputType = {
    id: number
    birim: number
    telefon: number
    aciklama: number
    ekleyen: number
    eklenmetarihi: number
    onay: number
    _all: number
  }


  export type Bilgi_telefonAvgAggregateInputType = {
    id?: true
    onay?: true
  }

  export type Bilgi_telefonSumAggregateInputType = {
    id?: true
    onay?: true
  }

  export type Bilgi_telefonMinAggregateInputType = {
    id?: true
    birim?: true
    telefon?: true
    aciklama?: true
    ekleyen?: true
    eklenmetarihi?: true
    onay?: true
  }

  export type Bilgi_telefonMaxAggregateInputType = {
    id?: true
    birim?: true
    telefon?: true
    aciklama?: true
    ekleyen?: true
    eklenmetarihi?: true
    onay?: true
  }

  export type Bilgi_telefonCountAggregateInputType = {
    id?: true
    birim?: true
    telefon?: true
    aciklama?: true
    ekleyen?: true
    eklenmetarihi?: true
    onay?: true
    _all?: true
  }

  export type Bilgi_telefonAggregateArgs = {
    /**
     * Filter which bilgi_telefon to aggregate.
     */
    where?: bilgi_telefonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bilgi_telefons to fetch.
     */
    orderBy?: Enumerable<bilgi_telefonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bilgi_telefonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bilgi_telefons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bilgi_telefons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bilgi_telefons
    **/
    _count?: true | Bilgi_telefonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Bilgi_telefonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Bilgi_telefonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Bilgi_telefonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Bilgi_telefonMaxAggregateInputType
  }

  export type GetBilgi_telefonAggregateType<T extends Bilgi_telefonAggregateArgs> = {
        [P in keyof T & keyof AggregateBilgi_telefon]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBilgi_telefon[P]>
      : GetScalarType<T[P], AggregateBilgi_telefon[P]>
  }




  export type Bilgi_telefonGroupByArgs = {
    where?: bilgi_telefonWhereInput
    orderBy?: Enumerable<bilgi_telefonOrderByWithAggregationInput>
    by: Bilgi_telefonScalarFieldEnum[]
    having?: bilgi_telefonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Bilgi_telefonCountAggregateInputType | true
    _avg?: Bilgi_telefonAvgAggregateInputType
    _sum?: Bilgi_telefonSumAggregateInputType
    _min?: Bilgi_telefonMinAggregateInputType
    _max?: Bilgi_telefonMaxAggregateInputType
  }


  export type Bilgi_telefonGroupByOutputType = {
    id: number
    birim: string | null
    telefon: string | null
    aciklama: string | null
    ekleyen: string | null
    eklenmetarihi: string | null
    onay: number | null
    _count: Bilgi_telefonCountAggregateOutputType | null
    _avg: Bilgi_telefonAvgAggregateOutputType | null
    _sum: Bilgi_telefonSumAggregateOutputType | null
    _min: Bilgi_telefonMinAggregateOutputType | null
    _max: Bilgi_telefonMaxAggregateOutputType | null
  }

  type GetBilgi_telefonGroupByPayload<T extends Bilgi_telefonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Bilgi_telefonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Bilgi_telefonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Bilgi_telefonGroupByOutputType[P]>
            : GetScalarType<T[P], Bilgi_telefonGroupByOutputType[P]>
        }
      >
    >


  export type bilgi_telefonSelect = {
    id?: boolean
    birim?: boolean
    telefon?: boolean
    aciklama?: boolean
    ekleyen?: boolean
    eklenmetarihi?: boolean
    onay?: boolean
  }


  export type bilgi_telefonGetPayload<S extends boolean | null | undefined | bilgi_telefonArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? bilgi_telefon :
    S extends undefined ? never :
    S extends { include: any } & (bilgi_telefonArgs | bilgi_telefonFindManyArgs)
    ? bilgi_telefon 
    : S extends { select: any } & (bilgi_telefonArgs | bilgi_telefonFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof bilgi_telefon ? bilgi_telefon[P] : never
  } 
      : bilgi_telefon


  type bilgi_telefonCountArgs = 
    Omit<bilgi_telefonFindManyArgs, 'select' | 'include'> & {
      select?: Bilgi_telefonCountAggregateInputType | true
    }

  export interface bilgi_telefonDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Bilgi_telefon that matches the filter.
     * @param {bilgi_telefonFindUniqueArgs} args - Arguments to find a Bilgi_telefon
     * @example
     * // Get one Bilgi_telefon
     * const bilgi_telefon = await prisma.bilgi_telefon.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends bilgi_telefonFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, bilgi_telefonFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'bilgi_telefon'> extends True ? Prisma__bilgi_telefonClient<bilgi_telefonGetPayload<T>> : Prisma__bilgi_telefonClient<bilgi_telefonGetPayload<T> | null, null>

    /**
     * Find one Bilgi_telefon that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {bilgi_telefonFindUniqueOrThrowArgs} args - Arguments to find a Bilgi_telefon
     * @example
     * // Get one Bilgi_telefon
     * const bilgi_telefon = await prisma.bilgi_telefon.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends bilgi_telefonFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, bilgi_telefonFindUniqueOrThrowArgs>
    ): Prisma__bilgi_telefonClient<bilgi_telefonGetPayload<T>>

    /**
     * Find the first Bilgi_telefon that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bilgi_telefonFindFirstArgs} args - Arguments to find a Bilgi_telefon
     * @example
     * // Get one Bilgi_telefon
     * const bilgi_telefon = await prisma.bilgi_telefon.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends bilgi_telefonFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, bilgi_telefonFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'bilgi_telefon'> extends True ? Prisma__bilgi_telefonClient<bilgi_telefonGetPayload<T>> : Prisma__bilgi_telefonClient<bilgi_telefonGetPayload<T> | null, null>

    /**
     * Find the first Bilgi_telefon that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bilgi_telefonFindFirstOrThrowArgs} args - Arguments to find a Bilgi_telefon
     * @example
     * // Get one Bilgi_telefon
     * const bilgi_telefon = await prisma.bilgi_telefon.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends bilgi_telefonFindFirstOrThrowArgs>(
      args?: SelectSubset<T, bilgi_telefonFindFirstOrThrowArgs>
    ): Prisma__bilgi_telefonClient<bilgi_telefonGetPayload<T>>

    /**
     * Find zero or more Bilgi_telefons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bilgi_telefonFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bilgi_telefons
     * const bilgi_telefons = await prisma.bilgi_telefon.findMany()
     * 
     * // Get first 10 Bilgi_telefons
     * const bilgi_telefons = await prisma.bilgi_telefon.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bilgi_telefonWithIdOnly = await prisma.bilgi_telefon.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends bilgi_telefonFindManyArgs>(
      args?: SelectSubset<T, bilgi_telefonFindManyArgs>
    ): Prisma.PrismaPromise<Array<bilgi_telefonGetPayload<T>>>

    /**
     * Create a Bilgi_telefon.
     * @param {bilgi_telefonCreateArgs} args - Arguments to create a Bilgi_telefon.
     * @example
     * // Create one Bilgi_telefon
     * const Bilgi_telefon = await prisma.bilgi_telefon.create({
     *   data: {
     *     // ... data to create a Bilgi_telefon
     *   }
     * })
     * 
    **/
    create<T extends bilgi_telefonCreateArgs>(
      args: SelectSubset<T, bilgi_telefonCreateArgs>
    ): Prisma__bilgi_telefonClient<bilgi_telefonGetPayload<T>>

    /**
     * Create many Bilgi_telefons.
     *     @param {bilgi_telefonCreateManyArgs} args - Arguments to create many Bilgi_telefons.
     *     @example
     *     // Create many Bilgi_telefons
     *     const bilgi_telefon = await prisma.bilgi_telefon.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends bilgi_telefonCreateManyArgs>(
      args?: SelectSubset<T, bilgi_telefonCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bilgi_telefon.
     * @param {bilgi_telefonDeleteArgs} args - Arguments to delete one Bilgi_telefon.
     * @example
     * // Delete one Bilgi_telefon
     * const Bilgi_telefon = await prisma.bilgi_telefon.delete({
     *   where: {
     *     // ... filter to delete one Bilgi_telefon
     *   }
     * })
     * 
    **/
    delete<T extends bilgi_telefonDeleteArgs>(
      args: SelectSubset<T, bilgi_telefonDeleteArgs>
    ): Prisma__bilgi_telefonClient<bilgi_telefonGetPayload<T>>

    /**
     * Update one Bilgi_telefon.
     * @param {bilgi_telefonUpdateArgs} args - Arguments to update one Bilgi_telefon.
     * @example
     * // Update one Bilgi_telefon
     * const bilgi_telefon = await prisma.bilgi_telefon.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends bilgi_telefonUpdateArgs>(
      args: SelectSubset<T, bilgi_telefonUpdateArgs>
    ): Prisma__bilgi_telefonClient<bilgi_telefonGetPayload<T>>

    /**
     * Delete zero or more Bilgi_telefons.
     * @param {bilgi_telefonDeleteManyArgs} args - Arguments to filter Bilgi_telefons to delete.
     * @example
     * // Delete a few Bilgi_telefons
     * const { count } = await prisma.bilgi_telefon.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends bilgi_telefonDeleteManyArgs>(
      args?: SelectSubset<T, bilgi_telefonDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bilgi_telefons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bilgi_telefonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bilgi_telefons
     * const bilgi_telefon = await prisma.bilgi_telefon.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends bilgi_telefonUpdateManyArgs>(
      args: SelectSubset<T, bilgi_telefonUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bilgi_telefon.
     * @param {bilgi_telefonUpsertArgs} args - Arguments to update or create a Bilgi_telefon.
     * @example
     * // Update or create a Bilgi_telefon
     * const bilgi_telefon = await prisma.bilgi_telefon.upsert({
     *   create: {
     *     // ... data to create a Bilgi_telefon
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bilgi_telefon we want to update
     *   }
     * })
    **/
    upsert<T extends bilgi_telefonUpsertArgs>(
      args: SelectSubset<T, bilgi_telefonUpsertArgs>
    ): Prisma__bilgi_telefonClient<bilgi_telefonGetPayload<T>>

    /**
     * Count the number of Bilgi_telefons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bilgi_telefonCountArgs} args - Arguments to filter Bilgi_telefons to count.
     * @example
     * // Count the number of Bilgi_telefons
     * const count = await prisma.bilgi_telefon.count({
     *   where: {
     *     // ... the filter for the Bilgi_telefons we want to count
     *   }
     * })
    **/
    count<T extends bilgi_telefonCountArgs>(
      args?: Subset<T, bilgi_telefonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Bilgi_telefonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bilgi_telefon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Bilgi_telefonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Bilgi_telefonAggregateArgs>(args: Subset<T, Bilgi_telefonAggregateArgs>): Prisma.PrismaPromise<GetBilgi_telefonAggregateType<T>>

    /**
     * Group by Bilgi_telefon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Bilgi_telefonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Bilgi_telefonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Bilgi_telefonGroupByArgs['orderBy'] }
        : { orderBy?: Bilgi_telefonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Bilgi_telefonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBilgi_telefonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for bilgi_telefon.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__bilgi_telefonClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * bilgi_telefon base type for findUnique actions
   */
  export type bilgi_telefonFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the bilgi_telefon
     */
    select?: bilgi_telefonSelect | null
    /**
     * Filter, which bilgi_telefon to fetch.
     */
    where: bilgi_telefonWhereUniqueInput
  }

  /**
   * bilgi_telefon findUnique
   */
  export interface bilgi_telefonFindUniqueArgs extends bilgi_telefonFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * bilgi_telefon findUniqueOrThrow
   */
  export type bilgi_telefonFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the bilgi_telefon
     */
    select?: bilgi_telefonSelect | null
    /**
     * Filter, which bilgi_telefon to fetch.
     */
    where: bilgi_telefonWhereUniqueInput
  }


  /**
   * bilgi_telefon base type for findFirst actions
   */
  export type bilgi_telefonFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the bilgi_telefon
     */
    select?: bilgi_telefonSelect | null
    /**
     * Filter, which bilgi_telefon to fetch.
     */
    where?: bilgi_telefonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bilgi_telefons to fetch.
     */
    orderBy?: Enumerable<bilgi_telefonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bilgi_telefons.
     */
    cursor?: bilgi_telefonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bilgi_telefons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bilgi_telefons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bilgi_telefons.
     */
    distinct?: Enumerable<Bilgi_telefonScalarFieldEnum>
  }

  /**
   * bilgi_telefon findFirst
   */
  export interface bilgi_telefonFindFirstArgs extends bilgi_telefonFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * bilgi_telefon findFirstOrThrow
   */
  export type bilgi_telefonFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the bilgi_telefon
     */
    select?: bilgi_telefonSelect | null
    /**
     * Filter, which bilgi_telefon to fetch.
     */
    where?: bilgi_telefonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bilgi_telefons to fetch.
     */
    orderBy?: Enumerable<bilgi_telefonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bilgi_telefons.
     */
    cursor?: bilgi_telefonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bilgi_telefons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bilgi_telefons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bilgi_telefons.
     */
    distinct?: Enumerable<Bilgi_telefonScalarFieldEnum>
  }


  /**
   * bilgi_telefon findMany
   */
  export type bilgi_telefonFindManyArgs = {
    /**
     * Select specific fields to fetch from the bilgi_telefon
     */
    select?: bilgi_telefonSelect | null
    /**
     * Filter, which bilgi_telefons to fetch.
     */
    where?: bilgi_telefonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bilgi_telefons to fetch.
     */
    orderBy?: Enumerable<bilgi_telefonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bilgi_telefons.
     */
    cursor?: bilgi_telefonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bilgi_telefons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bilgi_telefons.
     */
    skip?: number
    distinct?: Enumerable<Bilgi_telefonScalarFieldEnum>
  }


  /**
   * bilgi_telefon create
   */
  export type bilgi_telefonCreateArgs = {
    /**
     * Select specific fields to fetch from the bilgi_telefon
     */
    select?: bilgi_telefonSelect | null
    /**
     * The data needed to create a bilgi_telefon.
     */
    data: XOR<bilgi_telefonCreateInput, bilgi_telefonUncheckedCreateInput>
  }


  /**
   * bilgi_telefon createMany
   */
  export type bilgi_telefonCreateManyArgs = {
    /**
     * The data used to create many bilgi_telefons.
     */
    data: Enumerable<bilgi_telefonCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * bilgi_telefon update
   */
  export type bilgi_telefonUpdateArgs = {
    /**
     * Select specific fields to fetch from the bilgi_telefon
     */
    select?: bilgi_telefonSelect | null
    /**
     * The data needed to update a bilgi_telefon.
     */
    data: XOR<bilgi_telefonUpdateInput, bilgi_telefonUncheckedUpdateInput>
    /**
     * Choose, which bilgi_telefon to update.
     */
    where: bilgi_telefonWhereUniqueInput
  }


  /**
   * bilgi_telefon updateMany
   */
  export type bilgi_telefonUpdateManyArgs = {
    /**
     * The data used to update bilgi_telefons.
     */
    data: XOR<bilgi_telefonUpdateManyMutationInput, bilgi_telefonUncheckedUpdateManyInput>
    /**
     * Filter which bilgi_telefons to update
     */
    where?: bilgi_telefonWhereInput
  }


  /**
   * bilgi_telefon upsert
   */
  export type bilgi_telefonUpsertArgs = {
    /**
     * Select specific fields to fetch from the bilgi_telefon
     */
    select?: bilgi_telefonSelect | null
    /**
     * The filter to search for the bilgi_telefon to update in case it exists.
     */
    where: bilgi_telefonWhereUniqueInput
    /**
     * In case the bilgi_telefon found by the `where` argument doesn't exist, create a new bilgi_telefon with this data.
     */
    create: XOR<bilgi_telefonCreateInput, bilgi_telefonUncheckedCreateInput>
    /**
     * In case the bilgi_telefon was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bilgi_telefonUpdateInput, bilgi_telefonUncheckedUpdateInput>
  }


  /**
   * bilgi_telefon delete
   */
  export type bilgi_telefonDeleteArgs = {
    /**
     * Select specific fields to fetch from the bilgi_telefon
     */
    select?: bilgi_telefonSelect | null
    /**
     * Filter which bilgi_telefon to delete.
     */
    where: bilgi_telefonWhereUniqueInput
  }


  /**
   * bilgi_telefon deleteMany
   */
  export type bilgi_telefonDeleteManyArgs = {
    /**
     * Filter which bilgi_telefons to delete
     */
    where?: bilgi_telefonWhereInput
  }


  /**
   * bilgi_telefon without action
   */
  export type bilgi_telefonArgs = {
    /**
     * Select specific fields to fetch from the bilgi_telefon
     */
    select?: bilgi_telefonSelect | null
  }



  /**
   * Model bilgi_web
   */


  export type AggregateBilgi_web = {
    _count: Bilgi_webCountAggregateOutputType | null
    _avg: Bilgi_webAvgAggregateOutputType | null
    _sum: Bilgi_webSumAggregateOutputType | null
    _min: Bilgi_webMinAggregateOutputType | null
    _max: Bilgi_webMaxAggregateOutputType | null
  }

  export type Bilgi_webAvgAggregateOutputType = {
    id: number | null
    onay: number | null
  }

  export type Bilgi_webSumAggregateOutputType = {
    id: number | null
    onay: number | null
  }

  export type Bilgi_webMinAggregateOutputType = {
    id: number | null
    birim: string | null
    web: string | null
    aciklama: string | null
    ekleyen: string | null
    eklenmetarihi: string | null
    onay: number | null
  }

  export type Bilgi_webMaxAggregateOutputType = {
    id: number | null
    birim: string | null
    web: string | null
    aciklama: string | null
    ekleyen: string | null
    eklenmetarihi: string | null
    onay: number | null
  }

  export type Bilgi_webCountAggregateOutputType = {
    id: number
    birim: number
    web: number
    aciklama: number
    ekleyen: number
    eklenmetarihi: number
    onay: number
    _all: number
  }


  export type Bilgi_webAvgAggregateInputType = {
    id?: true
    onay?: true
  }

  export type Bilgi_webSumAggregateInputType = {
    id?: true
    onay?: true
  }

  export type Bilgi_webMinAggregateInputType = {
    id?: true
    birim?: true
    web?: true
    aciklama?: true
    ekleyen?: true
    eklenmetarihi?: true
    onay?: true
  }

  export type Bilgi_webMaxAggregateInputType = {
    id?: true
    birim?: true
    web?: true
    aciklama?: true
    ekleyen?: true
    eklenmetarihi?: true
    onay?: true
  }

  export type Bilgi_webCountAggregateInputType = {
    id?: true
    birim?: true
    web?: true
    aciklama?: true
    ekleyen?: true
    eklenmetarihi?: true
    onay?: true
    _all?: true
  }

  export type Bilgi_webAggregateArgs = {
    /**
     * Filter which bilgi_web to aggregate.
     */
    where?: bilgi_webWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bilgi_webs to fetch.
     */
    orderBy?: Enumerable<bilgi_webOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: bilgi_webWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bilgi_webs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bilgi_webs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bilgi_webs
    **/
    _count?: true | Bilgi_webCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Bilgi_webAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Bilgi_webSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Bilgi_webMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Bilgi_webMaxAggregateInputType
  }

  export type GetBilgi_webAggregateType<T extends Bilgi_webAggregateArgs> = {
        [P in keyof T & keyof AggregateBilgi_web]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBilgi_web[P]>
      : GetScalarType<T[P], AggregateBilgi_web[P]>
  }




  export type Bilgi_webGroupByArgs = {
    where?: bilgi_webWhereInput
    orderBy?: Enumerable<bilgi_webOrderByWithAggregationInput>
    by: Bilgi_webScalarFieldEnum[]
    having?: bilgi_webScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Bilgi_webCountAggregateInputType | true
    _avg?: Bilgi_webAvgAggregateInputType
    _sum?: Bilgi_webSumAggregateInputType
    _min?: Bilgi_webMinAggregateInputType
    _max?: Bilgi_webMaxAggregateInputType
  }


  export type Bilgi_webGroupByOutputType = {
    id: number
    birim: string | null
    web: string | null
    aciklama: string | null
    ekleyen: string | null
    eklenmetarihi: string | null
    onay: number | null
    _count: Bilgi_webCountAggregateOutputType | null
    _avg: Bilgi_webAvgAggregateOutputType | null
    _sum: Bilgi_webSumAggregateOutputType | null
    _min: Bilgi_webMinAggregateOutputType | null
    _max: Bilgi_webMaxAggregateOutputType | null
  }

  type GetBilgi_webGroupByPayload<T extends Bilgi_webGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Bilgi_webGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Bilgi_webGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Bilgi_webGroupByOutputType[P]>
            : GetScalarType<T[P], Bilgi_webGroupByOutputType[P]>
        }
      >
    >


  export type bilgi_webSelect = {
    id?: boolean
    birim?: boolean
    web?: boolean
    aciklama?: boolean
    ekleyen?: boolean
    eklenmetarihi?: boolean
    onay?: boolean
  }


  export type bilgi_webGetPayload<S extends boolean | null | undefined | bilgi_webArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? bilgi_web :
    S extends undefined ? never :
    S extends { include: any } & (bilgi_webArgs | bilgi_webFindManyArgs)
    ? bilgi_web 
    : S extends { select: any } & (bilgi_webArgs | bilgi_webFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof bilgi_web ? bilgi_web[P] : never
  } 
      : bilgi_web


  type bilgi_webCountArgs = 
    Omit<bilgi_webFindManyArgs, 'select' | 'include'> & {
      select?: Bilgi_webCountAggregateInputType | true
    }

  export interface bilgi_webDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Bilgi_web that matches the filter.
     * @param {bilgi_webFindUniqueArgs} args - Arguments to find a Bilgi_web
     * @example
     * // Get one Bilgi_web
     * const bilgi_web = await prisma.bilgi_web.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends bilgi_webFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, bilgi_webFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'bilgi_web'> extends True ? Prisma__bilgi_webClient<bilgi_webGetPayload<T>> : Prisma__bilgi_webClient<bilgi_webGetPayload<T> | null, null>

    /**
     * Find one Bilgi_web that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {bilgi_webFindUniqueOrThrowArgs} args - Arguments to find a Bilgi_web
     * @example
     * // Get one Bilgi_web
     * const bilgi_web = await prisma.bilgi_web.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends bilgi_webFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, bilgi_webFindUniqueOrThrowArgs>
    ): Prisma__bilgi_webClient<bilgi_webGetPayload<T>>

    /**
     * Find the first Bilgi_web that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bilgi_webFindFirstArgs} args - Arguments to find a Bilgi_web
     * @example
     * // Get one Bilgi_web
     * const bilgi_web = await prisma.bilgi_web.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends bilgi_webFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, bilgi_webFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'bilgi_web'> extends True ? Prisma__bilgi_webClient<bilgi_webGetPayload<T>> : Prisma__bilgi_webClient<bilgi_webGetPayload<T> | null, null>

    /**
     * Find the first Bilgi_web that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bilgi_webFindFirstOrThrowArgs} args - Arguments to find a Bilgi_web
     * @example
     * // Get one Bilgi_web
     * const bilgi_web = await prisma.bilgi_web.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends bilgi_webFindFirstOrThrowArgs>(
      args?: SelectSubset<T, bilgi_webFindFirstOrThrowArgs>
    ): Prisma__bilgi_webClient<bilgi_webGetPayload<T>>

    /**
     * Find zero or more Bilgi_webs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bilgi_webFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bilgi_webs
     * const bilgi_webs = await prisma.bilgi_web.findMany()
     * 
     * // Get first 10 Bilgi_webs
     * const bilgi_webs = await prisma.bilgi_web.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bilgi_webWithIdOnly = await prisma.bilgi_web.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends bilgi_webFindManyArgs>(
      args?: SelectSubset<T, bilgi_webFindManyArgs>
    ): Prisma.PrismaPromise<Array<bilgi_webGetPayload<T>>>

    /**
     * Create a Bilgi_web.
     * @param {bilgi_webCreateArgs} args - Arguments to create a Bilgi_web.
     * @example
     * // Create one Bilgi_web
     * const Bilgi_web = await prisma.bilgi_web.create({
     *   data: {
     *     // ... data to create a Bilgi_web
     *   }
     * })
     * 
    **/
    create<T extends bilgi_webCreateArgs>(
      args: SelectSubset<T, bilgi_webCreateArgs>
    ): Prisma__bilgi_webClient<bilgi_webGetPayload<T>>

    /**
     * Create many Bilgi_webs.
     *     @param {bilgi_webCreateManyArgs} args - Arguments to create many Bilgi_webs.
     *     @example
     *     // Create many Bilgi_webs
     *     const bilgi_web = await prisma.bilgi_web.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends bilgi_webCreateManyArgs>(
      args?: SelectSubset<T, bilgi_webCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bilgi_web.
     * @param {bilgi_webDeleteArgs} args - Arguments to delete one Bilgi_web.
     * @example
     * // Delete one Bilgi_web
     * const Bilgi_web = await prisma.bilgi_web.delete({
     *   where: {
     *     // ... filter to delete one Bilgi_web
     *   }
     * })
     * 
    **/
    delete<T extends bilgi_webDeleteArgs>(
      args: SelectSubset<T, bilgi_webDeleteArgs>
    ): Prisma__bilgi_webClient<bilgi_webGetPayload<T>>

    /**
     * Update one Bilgi_web.
     * @param {bilgi_webUpdateArgs} args - Arguments to update one Bilgi_web.
     * @example
     * // Update one Bilgi_web
     * const bilgi_web = await prisma.bilgi_web.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends bilgi_webUpdateArgs>(
      args: SelectSubset<T, bilgi_webUpdateArgs>
    ): Prisma__bilgi_webClient<bilgi_webGetPayload<T>>

    /**
     * Delete zero or more Bilgi_webs.
     * @param {bilgi_webDeleteManyArgs} args - Arguments to filter Bilgi_webs to delete.
     * @example
     * // Delete a few Bilgi_webs
     * const { count } = await prisma.bilgi_web.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends bilgi_webDeleteManyArgs>(
      args?: SelectSubset<T, bilgi_webDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bilgi_webs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bilgi_webUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bilgi_webs
     * const bilgi_web = await prisma.bilgi_web.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends bilgi_webUpdateManyArgs>(
      args: SelectSubset<T, bilgi_webUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bilgi_web.
     * @param {bilgi_webUpsertArgs} args - Arguments to update or create a Bilgi_web.
     * @example
     * // Update or create a Bilgi_web
     * const bilgi_web = await prisma.bilgi_web.upsert({
     *   create: {
     *     // ... data to create a Bilgi_web
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bilgi_web we want to update
     *   }
     * })
    **/
    upsert<T extends bilgi_webUpsertArgs>(
      args: SelectSubset<T, bilgi_webUpsertArgs>
    ): Prisma__bilgi_webClient<bilgi_webGetPayload<T>>

    /**
     * Count the number of Bilgi_webs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bilgi_webCountArgs} args - Arguments to filter Bilgi_webs to count.
     * @example
     * // Count the number of Bilgi_webs
     * const count = await prisma.bilgi_web.count({
     *   where: {
     *     // ... the filter for the Bilgi_webs we want to count
     *   }
     * })
    **/
    count<T extends bilgi_webCountArgs>(
      args?: Subset<T, bilgi_webCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Bilgi_webCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bilgi_web.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Bilgi_webAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Bilgi_webAggregateArgs>(args: Subset<T, Bilgi_webAggregateArgs>): Prisma.PrismaPromise<GetBilgi_webAggregateType<T>>

    /**
     * Group by Bilgi_web.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Bilgi_webGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Bilgi_webGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Bilgi_webGroupByArgs['orderBy'] }
        : { orderBy?: Bilgi_webGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Bilgi_webGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBilgi_webGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for bilgi_web.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__bilgi_webClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * bilgi_web base type for findUnique actions
   */
  export type bilgi_webFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the bilgi_web
     */
    select?: bilgi_webSelect | null
    /**
     * Filter, which bilgi_web to fetch.
     */
    where: bilgi_webWhereUniqueInput
  }

  /**
   * bilgi_web findUnique
   */
  export interface bilgi_webFindUniqueArgs extends bilgi_webFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * bilgi_web findUniqueOrThrow
   */
  export type bilgi_webFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the bilgi_web
     */
    select?: bilgi_webSelect | null
    /**
     * Filter, which bilgi_web to fetch.
     */
    where: bilgi_webWhereUniqueInput
  }


  /**
   * bilgi_web base type for findFirst actions
   */
  export type bilgi_webFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the bilgi_web
     */
    select?: bilgi_webSelect | null
    /**
     * Filter, which bilgi_web to fetch.
     */
    where?: bilgi_webWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bilgi_webs to fetch.
     */
    orderBy?: Enumerable<bilgi_webOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bilgi_webs.
     */
    cursor?: bilgi_webWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bilgi_webs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bilgi_webs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bilgi_webs.
     */
    distinct?: Enumerable<Bilgi_webScalarFieldEnum>
  }

  /**
   * bilgi_web findFirst
   */
  export interface bilgi_webFindFirstArgs extends bilgi_webFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * bilgi_web findFirstOrThrow
   */
  export type bilgi_webFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the bilgi_web
     */
    select?: bilgi_webSelect | null
    /**
     * Filter, which bilgi_web to fetch.
     */
    where?: bilgi_webWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bilgi_webs to fetch.
     */
    orderBy?: Enumerable<bilgi_webOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bilgi_webs.
     */
    cursor?: bilgi_webWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bilgi_webs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bilgi_webs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bilgi_webs.
     */
    distinct?: Enumerable<Bilgi_webScalarFieldEnum>
  }


  /**
   * bilgi_web findMany
   */
  export type bilgi_webFindManyArgs = {
    /**
     * Select specific fields to fetch from the bilgi_web
     */
    select?: bilgi_webSelect | null
    /**
     * Filter, which bilgi_webs to fetch.
     */
    where?: bilgi_webWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bilgi_webs to fetch.
     */
    orderBy?: Enumerable<bilgi_webOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bilgi_webs.
     */
    cursor?: bilgi_webWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bilgi_webs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bilgi_webs.
     */
    skip?: number
    distinct?: Enumerable<Bilgi_webScalarFieldEnum>
  }


  /**
   * bilgi_web create
   */
  export type bilgi_webCreateArgs = {
    /**
     * Select specific fields to fetch from the bilgi_web
     */
    select?: bilgi_webSelect | null
    /**
     * The data needed to create a bilgi_web.
     */
    data: XOR<bilgi_webCreateInput, bilgi_webUncheckedCreateInput>
  }


  /**
   * bilgi_web createMany
   */
  export type bilgi_webCreateManyArgs = {
    /**
     * The data used to create many bilgi_webs.
     */
    data: Enumerable<bilgi_webCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * bilgi_web update
   */
  export type bilgi_webUpdateArgs = {
    /**
     * Select specific fields to fetch from the bilgi_web
     */
    select?: bilgi_webSelect | null
    /**
     * The data needed to update a bilgi_web.
     */
    data: XOR<bilgi_webUpdateInput, bilgi_webUncheckedUpdateInput>
    /**
     * Choose, which bilgi_web to update.
     */
    where: bilgi_webWhereUniqueInput
  }


  /**
   * bilgi_web updateMany
   */
  export type bilgi_webUpdateManyArgs = {
    /**
     * The data used to update bilgi_webs.
     */
    data: XOR<bilgi_webUpdateManyMutationInput, bilgi_webUncheckedUpdateManyInput>
    /**
     * Filter which bilgi_webs to update
     */
    where?: bilgi_webWhereInput
  }


  /**
   * bilgi_web upsert
   */
  export type bilgi_webUpsertArgs = {
    /**
     * Select specific fields to fetch from the bilgi_web
     */
    select?: bilgi_webSelect | null
    /**
     * The filter to search for the bilgi_web to update in case it exists.
     */
    where: bilgi_webWhereUniqueInput
    /**
     * In case the bilgi_web found by the `where` argument doesn't exist, create a new bilgi_web with this data.
     */
    create: XOR<bilgi_webCreateInput, bilgi_webUncheckedCreateInput>
    /**
     * In case the bilgi_web was found with the provided `where` argument, update it with this data.
     */
    update: XOR<bilgi_webUpdateInput, bilgi_webUncheckedUpdateInput>
  }


  /**
   * bilgi_web delete
   */
  export type bilgi_webDeleteArgs = {
    /**
     * Select specific fields to fetch from the bilgi_web
     */
    select?: bilgi_webSelect | null
    /**
     * Filter which bilgi_web to delete.
     */
    where: bilgi_webWhereUniqueInput
  }


  /**
   * bilgi_web deleteMany
   */
  export type bilgi_webDeleteManyArgs = {
    /**
     * Filter which bilgi_webs to delete
     */
    where?: bilgi_webWhereInput
  }


  /**
   * bilgi_web without action
   */
  export type bilgi_webArgs = {
    /**
     * Select specific fields to fetch from the bilgi_web
     */
    select?: bilgi_webSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const Bilgi_telefonScalarFieldEnum: {
    id: 'id',
    birim: 'birim',
    telefon: 'telefon',
    aciklama: 'aciklama',
    ekleyen: 'ekleyen',
    eklenmetarihi: 'eklenmetarihi',
    onay: 'onay'
  };

  export type Bilgi_telefonScalarFieldEnum = (typeof Bilgi_telefonScalarFieldEnum)[keyof typeof Bilgi_telefonScalarFieldEnum]


  export const Bilgi_webScalarFieldEnum: {
    id: 'id',
    birim: 'birim',
    web: 'web',
    aciklama: 'aciklama',
    ekleyen: 'ekleyen',
    eklenmetarihi: 'eklenmetarihi',
    onay: 'onay'
  };

  export type Bilgi_webScalarFieldEnum = (typeof Bilgi_webScalarFieldEnum)[keyof typeof Bilgi_webScalarFieldEnum]


  export const DestekalScalarFieldEnum: {
    id: 'id',
    adsoyad: 'adsoyad',
    tcno: 'tcno',
    telefon: 'telefon',
    adres: 'adres',
    konu: 'konu',
    tarih: 'tarih',
    durum: 'durum',
    kapand_: 'kapand_',
    kapatan: 'kapatan',
    kapatanaciklama: 'kapatanaciklama',
    kapatmatarihi: 'kapatmatarihi',
    silindi: 'silindi'
  };

  export type DestekalScalarFieldEnum = (typeof DestekalScalarFieldEnum)[keyof typeof DestekalScalarFieldEnum]


  export const DestekolScalarFieldEnum: {
    id: 'id',
    adsoyad: 'adsoyad',
    isyeri: 'isyeri',
    meslek: 'meslek',
    yas: 'yas',
    telefon: 'telefon',
    adres: 'adres',
    konu: 'konu',
    aciklama: 'aciklama',
    tarih: 'tarih',
    durum: 'durum',
    kapand_: 'kapand_',
    kapatan: 'kapatan',
    kapatanaciklama: 'kapatanaciklama',
    kapatmatarihi: 'kapatmatarihi',
    silindi: 'silindi'
  };

  export type DestekolScalarFieldEnum = (typeof DestekolScalarFieldEnum)[keyof typeof DestekolScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    pertcno: 'pertcno',
    password: 'password',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    pertcno?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    emailVerified?: DateTimeNullableFilter | Date | string | null
    image?: StringNullableFilter | string | null
    Account?: AccountListRelationFilter
    Session?: SessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    pertcno?: SortOrder
    password?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    Account?: AccountOrderByRelationAggregateInput
    Session?: SessionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    pertcno?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    pertcno?: SortOrder
    password?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    pertcno?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter | Date | string | null
    image?: StringNullableWithAggregatesFilter | string | null
  }

  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = {
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
  }

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccountScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    provider?: StringWithAggregatesFilter | string
    providerAccountId?: StringWithAggregatesFilter | string
    refresh_token?: StringNullableWithAggregatesFilter | string | null
    access_token?: StringNullableWithAggregatesFilter | string | null
    expires_at?: IntNullableWithAggregatesFilter | number | null
    token_type?: StringNullableWithAggregatesFilter | string | null
    scope?: StringNullableWithAggregatesFilter | string | null
    id_token?: StringNullableWithAggregatesFilter | string | null
    session_state?: StringNullableWithAggregatesFilter | string | null
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = {
    id?: string
    sessionToken?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sessionToken?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type destekalWhereInput = {
    AND?: Enumerable<destekalWhereInput>
    OR?: Enumerable<destekalWhereInput>
    NOT?: Enumerable<destekalWhereInput>
    id?: IntFilter | number
    adsoyad?: StringNullableFilter | string | null
    tcno?: StringNullableFilter | string | null
    telefon?: StringNullableFilter | string | null
    adres?: StringNullableFilter | string | null
    konu?: StringNullableFilter | string | null
    tarih?: DateTimeNullableFilter | Date | string | null
    durum?: StringNullableFilter | string | null
    kapand_?: IntNullableFilter | number | null
    kapatan?: StringNullableFilter | string | null
    kapatanaciklama?: StringNullableFilter | string | null
    kapatmatarihi?: DateTimeNullableFilter | Date | string | null
    silindi?: IntNullableFilter | number | null
  }

  export type destekalOrderByWithRelationInput = {
    id?: SortOrder
    adsoyad?: SortOrder
    tcno?: SortOrder
    telefon?: SortOrder
    adres?: SortOrder
    konu?: SortOrder
    tarih?: SortOrder
    durum?: SortOrder
    kapand_?: SortOrder
    kapatan?: SortOrder
    kapatanaciklama?: SortOrder
    kapatmatarihi?: SortOrder
    silindi?: SortOrder
  }

  export type destekalWhereUniqueInput = {
    id?: number
  }

  export type destekalOrderByWithAggregationInput = {
    id?: SortOrder
    adsoyad?: SortOrder
    tcno?: SortOrder
    telefon?: SortOrder
    adres?: SortOrder
    konu?: SortOrder
    tarih?: SortOrder
    durum?: SortOrder
    kapand_?: SortOrder
    kapatan?: SortOrder
    kapatanaciklama?: SortOrder
    kapatmatarihi?: SortOrder
    silindi?: SortOrder
    _count?: destekalCountOrderByAggregateInput
    _avg?: destekalAvgOrderByAggregateInput
    _max?: destekalMaxOrderByAggregateInput
    _min?: destekalMinOrderByAggregateInput
    _sum?: destekalSumOrderByAggregateInput
  }

  export type destekalScalarWhereWithAggregatesInput = {
    AND?: Enumerable<destekalScalarWhereWithAggregatesInput>
    OR?: Enumerable<destekalScalarWhereWithAggregatesInput>
    NOT?: Enumerable<destekalScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    adsoyad?: StringNullableWithAggregatesFilter | string | null
    tcno?: StringNullableWithAggregatesFilter | string | null
    telefon?: StringNullableWithAggregatesFilter | string | null
    adres?: StringNullableWithAggregatesFilter | string | null
    konu?: StringNullableWithAggregatesFilter | string | null
    tarih?: DateTimeNullableWithAggregatesFilter | Date | string | null
    durum?: StringNullableWithAggregatesFilter | string | null
    kapand_?: IntNullableWithAggregatesFilter | number | null
    kapatan?: StringNullableWithAggregatesFilter | string | null
    kapatanaciklama?: StringNullableWithAggregatesFilter | string | null
    kapatmatarihi?: DateTimeNullableWithAggregatesFilter | Date | string | null
    silindi?: IntNullableWithAggregatesFilter | number | null
  }

  export type destekolWhereInput = {
    AND?: Enumerable<destekolWhereInput>
    OR?: Enumerable<destekolWhereInput>
    NOT?: Enumerable<destekolWhereInput>
    id?: IntFilter | number
    adsoyad?: StringNullableFilter | string | null
    isyeri?: StringNullableFilter | string | null
    meslek?: StringNullableFilter | string | null
    yas?: StringNullableFilter | string | null
    telefon?: StringNullableFilter | string | null
    adres?: StringNullableFilter | string | null
    konu?: StringNullableFilter | string | null
    aciklama?: StringNullableFilter | string | null
    tarih?: DateTimeNullableFilter | Date | string | null
    durum?: StringNullableFilter | string | null
    kapand_?: StringNullableFilter | string | null
    kapatan?: StringNullableFilter | string | null
    kapatanaciklama?: StringNullableFilter | string | null
    kapatmatarihi?: StringNullableFilter | string | null
    silindi?: StringNullableFilter | string | null
  }

  export type destekolOrderByWithRelationInput = {
    id?: SortOrder
    adsoyad?: SortOrder
    isyeri?: SortOrder
    meslek?: SortOrder
    yas?: SortOrder
    telefon?: SortOrder
    adres?: SortOrder
    konu?: SortOrder
    aciklama?: SortOrder
    tarih?: SortOrder
    durum?: SortOrder
    kapand_?: SortOrder
    kapatan?: SortOrder
    kapatanaciklama?: SortOrder
    kapatmatarihi?: SortOrder
    silindi?: SortOrder
  }

  export type destekolWhereUniqueInput = {
    id?: number
  }

  export type destekolOrderByWithAggregationInput = {
    id?: SortOrder
    adsoyad?: SortOrder
    isyeri?: SortOrder
    meslek?: SortOrder
    yas?: SortOrder
    telefon?: SortOrder
    adres?: SortOrder
    konu?: SortOrder
    aciklama?: SortOrder
    tarih?: SortOrder
    durum?: SortOrder
    kapand_?: SortOrder
    kapatan?: SortOrder
    kapatanaciklama?: SortOrder
    kapatmatarihi?: SortOrder
    silindi?: SortOrder
    _count?: destekolCountOrderByAggregateInput
    _avg?: destekolAvgOrderByAggregateInput
    _max?: destekolMaxOrderByAggregateInput
    _min?: destekolMinOrderByAggregateInput
    _sum?: destekolSumOrderByAggregateInput
  }

  export type destekolScalarWhereWithAggregatesInput = {
    AND?: Enumerable<destekolScalarWhereWithAggregatesInput>
    OR?: Enumerable<destekolScalarWhereWithAggregatesInput>
    NOT?: Enumerable<destekolScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    adsoyad?: StringNullableWithAggregatesFilter | string | null
    isyeri?: StringNullableWithAggregatesFilter | string | null
    meslek?: StringNullableWithAggregatesFilter | string | null
    yas?: StringNullableWithAggregatesFilter | string | null
    telefon?: StringNullableWithAggregatesFilter | string | null
    adres?: StringNullableWithAggregatesFilter | string | null
    konu?: StringNullableWithAggregatesFilter | string | null
    aciklama?: StringNullableWithAggregatesFilter | string | null
    tarih?: DateTimeNullableWithAggregatesFilter | Date | string | null
    durum?: StringNullableWithAggregatesFilter | string | null
    kapand_?: StringNullableWithAggregatesFilter | string | null
    kapatan?: StringNullableWithAggregatesFilter | string | null
    kapatanaciklama?: StringNullableWithAggregatesFilter | string | null
    kapatmatarihi?: StringNullableWithAggregatesFilter | string | null
    silindi?: StringNullableWithAggregatesFilter | string | null
  }

  export type bilgi_telefonWhereInput = {
    AND?: Enumerable<bilgi_telefonWhereInput>
    OR?: Enumerable<bilgi_telefonWhereInput>
    NOT?: Enumerable<bilgi_telefonWhereInput>
    id?: IntFilter | number
    birim?: StringNullableFilter | string | null
    telefon?: StringNullableFilter | string | null
    aciklama?: StringNullableFilter | string | null
    ekleyen?: StringNullableFilter | string | null
    eklenmetarihi?: StringNullableFilter | string | null
    onay?: IntNullableFilter | number | null
  }

  export type bilgi_telefonOrderByWithRelationInput = {
    id?: SortOrder
    birim?: SortOrder
    telefon?: SortOrder
    aciklama?: SortOrder
    ekleyen?: SortOrder
    eklenmetarihi?: SortOrder
    onay?: SortOrder
  }

  export type bilgi_telefonWhereUniqueInput = {
    id?: number
  }

  export type bilgi_telefonOrderByWithAggregationInput = {
    id?: SortOrder
    birim?: SortOrder
    telefon?: SortOrder
    aciklama?: SortOrder
    ekleyen?: SortOrder
    eklenmetarihi?: SortOrder
    onay?: SortOrder
    _count?: bilgi_telefonCountOrderByAggregateInput
    _avg?: bilgi_telefonAvgOrderByAggregateInput
    _max?: bilgi_telefonMaxOrderByAggregateInput
    _min?: bilgi_telefonMinOrderByAggregateInput
    _sum?: bilgi_telefonSumOrderByAggregateInput
  }

  export type bilgi_telefonScalarWhereWithAggregatesInput = {
    AND?: Enumerable<bilgi_telefonScalarWhereWithAggregatesInput>
    OR?: Enumerable<bilgi_telefonScalarWhereWithAggregatesInput>
    NOT?: Enumerable<bilgi_telefonScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    birim?: StringNullableWithAggregatesFilter | string | null
    telefon?: StringNullableWithAggregatesFilter | string | null
    aciklama?: StringNullableWithAggregatesFilter | string | null
    ekleyen?: StringNullableWithAggregatesFilter | string | null
    eklenmetarihi?: StringNullableWithAggregatesFilter | string | null
    onay?: IntNullableWithAggregatesFilter | number | null
  }

  export type bilgi_webWhereInput = {
    AND?: Enumerable<bilgi_webWhereInput>
    OR?: Enumerable<bilgi_webWhereInput>
    NOT?: Enumerable<bilgi_webWhereInput>
    id?: IntFilter | number
    birim?: StringNullableFilter | string | null
    web?: StringNullableFilter | string | null
    aciklama?: StringNullableFilter | string | null
    ekleyen?: StringNullableFilter | string | null
    eklenmetarihi?: StringNullableFilter | string | null
    onay?: IntNullableFilter | number | null
  }

  export type bilgi_webOrderByWithRelationInput = {
    id?: SortOrder
    birim?: SortOrder
    web?: SortOrder
    aciklama?: SortOrder
    ekleyen?: SortOrder
    eklenmetarihi?: SortOrder
    onay?: SortOrder
  }

  export type bilgi_webWhereUniqueInput = {
    id?: number
  }

  export type bilgi_webOrderByWithAggregationInput = {
    id?: SortOrder
    birim?: SortOrder
    web?: SortOrder
    aciklama?: SortOrder
    ekleyen?: SortOrder
    eklenmetarihi?: SortOrder
    onay?: SortOrder
    _count?: bilgi_webCountOrderByAggregateInput
    _avg?: bilgi_webAvgOrderByAggregateInput
    _max?: bilgi_webMaxOrderByAggregateInput
    _min?: bilgi_webMinOrderByAggregateInput
    _sum?: bilgi_webSumOrderByAggregateInput
  }

  export type bilgi_webScalarWhereWithAggregatesInput = {
    AND?: Enumerable<bilgi_webScalarWhereWithAggregatesInput>
    OR?: Enumerable<bilgi_webScalarWhereWithAggregatesInput>
    NOT?: Enumerable<bilgi_webScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    birim?: StringNullableWithAggregatesFilter | string | null
    web?: StringNullableWithAggregatesFilter | string | null
    aciklama?: StringNullableWithAggregatesFilter | string | null
    ekleyen?: StringNullableWithAggregatesFilter | string | null
    eklenmetarihi?: StringNullableWithAggregatesFilter | string | null
    onay?: IntNullableWithAggregatesFilter | number | null
  }

  export type UserCreateInput = {
    id: string
    name?: string | null
    pertcno?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    Account?: AccountCreateNestedManyWithoutUserInput
    Session?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    name?: string | null
    pertcno?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    Account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pertcno?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Account?: AccountUpdateManyWithoutUserNestedInput
    Session?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pertcno?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    name?: string | null
    pertcno?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pertcno?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pertcno?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateInput = {
    id: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    User: UserCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateOneRequiredWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id: string
    sessionToken: string
    expires: Date | string
    User: UserCreateNestedOneWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type destekalCreateInput = {
    id?: number
    adsoyad?: string | null
    tcno?: string | null
    telefon?: string | null
    adres?: string | null
    konu?: string | null
    tarih?: Date | string | null
    durum?: string | null
    kapand_?: number | null
    kapatan?: string | null
    kapatanaciklama?: string | null
    kapatmatarihi?: Date | string | null
    silindi?: number | null
  }

  export type destekalUncheckedCreateInput = {
    id?: number
    adsoyad?: string | null
    tcno?: string | null
    telefon?: string | null
    adres?: string | null
    konu?: string | null
    tarih?: Date | string | null
    durum?: string | null
    kapand_?: number | null
    kapatan?: string | null
    kapatanaciklama?: string | null
    kapatmatarihi?: Date | string | null
    silindi?: number | null
  }

  export type destekalUpdateInput = {
    adsoyad?: NullableStringFieldUpdateOperationsInput | string | null
    tcno?: NullableStringFieldUpdateOperationsInput | string | null
    telefon?: NullableStringFieldUpdateOperationsInput | string | null
    adres?: NullableStringFieldUpdateOperationsInput | string | null
    konu?: NullableStringFieldUpdateOperationsInput | string | null
    tarih?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durum?: NullableStringFieldUpdateOperationsInput | string | null
    kapand_?: NullableIntFieldUpdateOperationsInput | number | null
    kapatan?: NullableStringFieldUpdateOperationsInput | string | null
    kapatanaciklama?: NullableStringFieldUpdateOperationsInput | string | null
    kapatmatarihi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    silindi?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type destekalUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    adsoyad?: NullableStringFieldUpdateOperationsInput | string | null
    tcno?: NullableStringFieldUpdateOperationsInput | string | null
    telefon?: NullableStringFieldUpdateOperationsInput | string | null
    adres?: NullableStringFieldUpdateOperationsInput | string | null
    konu?: NullableStringFieldUpdateOperationsInput | string | null
    tarih?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durum?: NullableStringFieldUpdateOperationsInput | string | null
    kapand_?: NullableIntFieldUpdateOperationsInput | number | null
    kapatan?: NullableStringFieldUpdateOperationsInput | string | null
    kapatanaciklama?: NullableStringFieldUpdateOperationsInput | string | null
    kapatmatarihi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    silindi?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type destekalCreateManyInput = {
    id?: number
    adsoyad?: string | null
    tcno?: string | null
    telefon?: string | null
    adres?: string | null
    konu?: string | null
    tarih?: Date | string | null
    durum?: string | null
    kapand_?: number | null
    kapatan?: string | null
    kapatanaciklama?: string | null
    kapatmatarihi?: Date | string | null
    silindi?: number | null
  }

  export type destekalUpdateManyMutationInput = {
    adsoyad?: NullableStringFieldUpdateOperationsInput | string | null
    tcno?: NullableStringFieldUpdateOperationsInput | string | null
    telefon?: NullableStringFieldUpdateOperationsInput | string | null
    adres?: NullableStringFieldUpdateOperationsInput | string | null
    konu?: NullableStringFieldUpdateOperationsInput | string | null
    tarih?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durum?: NullableStringFieldUpdateOperationsInput | string | null
    kapand_?: NullableIntFieldUpdateOperationsInput | number | null
    kapatan?: NullableStringFieldUpdateOperationsInput | string | null
    kapatanaciklama?: NullableStringFieldUpdateOperationsInput | string | null
    kapatmatarihi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    silindi?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type destekalUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    adsoyad?: NullableStringFieldUpdateOperationsInput | string | null
    tcno?: NullableStringFieldUpdateOperationsInput | string | null
    telefon?: NullableStringFieldUpdateOperationsInput | string | null
    adres?: NullableStringFieldUpdateOperationsInput | string | null
    konu?: NullableStringFieldUpdateOperationsInput | string | null
    tarih?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durum?: NullableStringFieldUpdateOperationsInput | string | null
    kapand_?: NullableIntFieldUpdateOperationsInput | number | null
    kapatan?: NullableStringFieldUpdateOperationsInput | string | null
    kapatanaciklama?: NullableStringFieldUpdateOperationsInput | string | null
    kapatmatarihi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    silindi?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type destekolCreateInput = {
    id?: number
    adsoyad?: string | null
    isyeri?: string | null
    meslek?: string | null
    yas?: string | null
    telefon?: string | null
    adres?: string | null
    konu?: string | null
    aciklama?: string | null
    tarih?: Date | string | null
    durum?: string | null
    kapand_?: string | null
    kapatan?: string | null
    kapatanaciklama?: string | null
    kapatmatarihi?: string | null
    silindi?: string | null
  }

  export type destekolUncheckedCreateInput = {
    id?: number
    adsoyad?: string | null
    isyeri?: string | null
    meslek?: string | null
    yas?: string | null
    telefon?: string | null
    adres?: string | null
    konu?: string | null
    aciklama?: string | null
    tarih?: Date | string | null
    durum?: string | null
    kapand_?: string | null
    kapatan?: string | null
    kapatanaciklama?: string | null
    kapatmatarihi?: string | null
    silindi?: string | null
  }

  export type destekolUpdateInput = {
    adsoyad?: NullableStringFieldUpdateOperationsInput | string | null
    isyeri?: NullableStringFieldUpdateOperationsInput | string | null
    meslek?: NullableStringFieldUpdateOperationsInput | string | null
    yas?: NullableStringFieldUpdateOperationsInput | string | null
    telefon?: NullableStringFieldUpdateOperationsInput | string | null
    adres?: NullableStringFieldUpdateOperationsInput | string | null
    konu?: NullableStringFieldUpdateOperationsInput | string | null
    aciklama?: NullableStringFieldUpdateOperationsInput | string | null
    tarih?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durum?: NullableStringFieldUpdateOperationsInput | string | null
    kapand_?: NullableStringFieldUpdateOperationsInput | string | null
    kapatan?: NullableStringFieldUpdateOperationsInput | string | null
    kapatanaciklama?: NullableStringFieldUpdateOperationsInput | string | null
    kapatmatarihi?: NullableStringFieldUpdateOperationsInput | string | null
    silindi?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type destekolUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    adsoyad?: NullableStringFieldUpdateOperationsInput | string | null
    isyeri?: NullableStringFieldUpdateOperationsInput | string | null
    meslek?: NullableStringFieldUpdateOperationsInput | string | null
    yas?: NullableStringFieldUpdateOperationsInput | string | null
    telefon?: NullableStringFieldUpdateOperationsInput | string | null
    adres?: NullableStringFieldUpdateOperationsInput | string | null
    konu?: NullableStringFieldUpdateOperationsInput | string | null
    aciklama?: NullableStringFieldUpdateOperationsInput | string | null
    tarih?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durum?: NullableStringFieldUpdateOperationsInput | string | null
    kapand_?: NullableStringFieldUpdateOperationsInput | string | null
    kapatan?: NullableStringFieldUpdateOperationsInput | string | null
    kapatanaciklama?: NullableStringFieldUpdateOperationsInput | string | null
    kapatmatarihi?: NullableStringFieldUpdateOperationsInput | string | null
    silindi?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type destekolCreateManyInput = {
    id?: number
    adsoyad?: string | null
    isyeri?: string | null
    meslek?: string | null
    yas?: string | null
    telefon?: string | null
    adres?: string | null
    konu?: string | null
    aciklama?: string | null
    tarih?: Date | string | null
    durum?: string | null
    kapand_?: string | null
    kapatan?: string | null
    kapatanaciklama?: string | null
    kapatmatarihi?: string | null
    silindi?: string | null
  }

  export type destekolUpdateManyMutationInput = {
    adsoyad?: NullableStringFieldUpdateOperationsInput | string | null
    isyeri?: NullableStringFieldUpdateOperationsInput | string | null
    meslek?: NullableStringFieldUpdateOperationsInput | string | null
    yas?: NullableStringFieldUpdateOperationsInput | string | null
    telefon?: NullableStringFieldUpdateOperationsInput | string | null
    adres?: NullableStringFieldUpdateOperationsInput | string | null
    konu?: NullableStringFieldUpdateOperationsInput | string | null
    aciklama?: NullableStringFieldUpdateOperationsInput | string | null
    tarih?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durum?: NullableStringFieldUpdateOperationsInput | string | null
    kapand_?: NullableStringFieldUpdateOperationsInput | string | null
    kapatan?: NullableStringFieldUpdateOperationsInput | string | null
    kapatanaciklama?: NullableStringFieldUpdateOperationsInput | string | null
    kapatmatarihi?: NullableStringFieldUpdateOperationsInput | string | null
    silindi?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type destekolUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    adsoyad?: NullableStringFieldUpdateOperationsInput | string | null
    isyeri?: NullableStringFieldUpdateOperationsInput | string | null
    meslek?: NullableStringFieldUpdateOperationsInput | string | null
    yas?: NullableStringFieldUpdateOperationsInput | string | null
    telefon?: NullableStringFieldUpdateOperationsInput | string | null
    adres?: NullableStringFieldUpdateOperationsInput | string | null
    konu?: NullableStringFieldUpdateOperationsInput | string | null
    aciklama?: NullableStringFieldUpdateOperationsInput | string | null
    tarih?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durum?: NullableStringFieldUpdateOperationsInput | string | null
    kapand_?: NullableStringFieldUpdateOperationsInput | string | null
    kapatan?: NullableStringFieldUpdateOperationsInput | string | null
    kapatanaciklama?: NullableStringFieldUpdateOperationsInput | string | null
    kapatmatarihi?: NullableStringFieldUpdateOperationsInput | string | null
    silindi?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type bilgi_telefonCreateInput = {
    id?: number
    birim?: string | null
    telefon?: string | null
    aciklama?: string | null
    ekleyen?: string | null
    eklenmetarihi?: string | null
    onay?: number | null
  }

  export type bilgi_telefonUncheckedCreateInput = {
    id?: number
    birim?: string | null
    telefon?: string | null
    aciklama?: string | null
    ekleyen?: string | null
    eklenmetarihi?: string | null
    onay?: number | null
  }

  export type bilgi_telefonUpdateInput = {
    birim?: NullableStringFieldUpdateOperationsInput | string | null
    telefon?: NullableStringFieldUpdateOperationsInput | string | null
    aciklama?: NullableStringFieldUpdateOperationsInput | string | null
    ekleyen?: NullableStringFieldUpdateOperationsInput | string | null
    eklenmetarihi?: NullableStringFieldUpdateOperationsInput | string | null
    onay?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type bilgi_telefonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    birim?: NullableStringFieldUpdateOperationsInput | string | null
    telefon?: NullableStringFieldUpdateOperationsInput | string | null
    aciklama?: NullableStringFieldUpdateOperationsInput | string | null
    ekleyen?: NullableStringFieldUpdateOperationsInput | string | null
    eklenmetarihi?: NullableStringFieldUpdateOperationsInput | string | null
    onay?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type bilgi_telefonCreateManyInput = {
    id?: number
    birim?: string | null
    telefon?: string | null
    aciklama?: string | null
    ekleyen?: string | null
    eklenmetarihi?: string | null
    onay?: number | null
  }

  export type bilgi_telefonUpdateManyMutationInput = {
    birim?: NullableStringFieldUpdateOperationsInput | string | null
    telefon?: NullableStringFieldUpdateOperationsInput | string | null
    aciklama?: NullableStringFieldUpdateOperationsInput | string | null
    ekleyen?: NullableStringFieldUpdateOperationsInput | string | null
    eklenmetarihi?: NullableStringFieldUpdateOperationsInput | string | null
    onay?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type bilgi_telefonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    birim?: NullableStringFieldUpdateOperationsInput | string | null
    telefon?: NullableStringFieldUpdateOperationsInput | string | null
    aciklama?: NullableStringFieldUpdateOperationsInput | string | null
    ekleyen?: NullableStringFieldUpdateOperationsInput | string | null
    eklenmetarihi?: NullableStringFieldUpdateOperationsInput | string | null
    onay?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type bilgi_webCreateInput = {
    id?: number
    birim?: string | null
    web?: string | null
    aciklama?: string | null
    ekleyen?: string | null
    eklenmetarihi?: string | null
    onay?: number | null
  }

  export type bilgi_webUncheckedCreateInput = {
    id?: number
    birim?: string | null
    web?: string | null
    aciklama?: string | null
    ekleyen?: string | null
    eklenmetarihi?: string | null
    onay?: number | null
  }

  export type bilgi_webUpdateInput = {
    birim?: NullableStringFieldUpdateOperationsInput | string | null
    web?: NullableStringFieldUpdateOperationsInput | string | null
    aciklama?: NullableStringFieldUpdateOperationsInput | string | null
    ekleyen?: NullableStringFieldUpdateOperationsInput | string | null
    eklenmetarihi?: NullableStringFieldUpdateOperationsInput | string | null
    onay?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type bilgi_webUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    birim?: NullableStringFieldUpdateOperationsInput | string | null
    web?: NullableStringFieldUpdateOperationsInput | string | null
    aciklama?: NullableStringFieldUpdateOperationsInput | string | null
    ekleyen?: NullableStringFieldUpdateOperationsInput | string | null
    eklenmetarihi?: NullableStringFieldUpdateOperationsInput | string | null
    onay?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type bilgi_webCreateManyInput = {
    id?: number
    birim?: string | null
    web?: string | null
    aciklama?: string | null
    ekleyen?: string | null
    eklenmetarihi?: string | null
    onay?: number | null
  }

  export type bilgi_webUpdateManyMutationInput = {
    birim?: NullableStringFieldUpdateOperationsInput | string | null
    web?: NullableStringFieldUpdateOperationsInput | string | null
    aciklama?: NullableStringFieldUpdateOperationsInput | string | null
    ekleyen?: NullableStringFieldUpdateOperationsInput | string | null
    eklenmetarihi?: NullableStringFieldUpdateOperationsInput | string | null
    onay?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type bilgi_webUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    birim?: NullableStringFieldUpdateOperationsInput | string | null
    web?: NullableStringFieldUpdateOperationsInput | string | null
    aciklama?: NullableStringFieldUpdateOperationsInput | string | null
    ekleyen?: NullableStringFieldUpdateOperationsInput | string | null
    eklenmetarihi?: NullableStringFieldUpdateOperationsInput | string | null
    onay?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pertcno?: SortOrder
    password?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pertcno?: SortOrder
    password?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pertcno?: SortOrder
    password?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type destekalCountOrderByAggregateInput = {
    id?: SortOrder
    adsoyad?: SortOrder
    tcno?: SortOrder
    telefon?: SortOrder
    adres?: SortOrder
    konu?: SortOrder
    tarih?: SortOrder
    durum?: SortOrder
    kapand_?: SortOrder
    kapatan?: SortOrder
    kapatanaciklama?: SortOrder
    kapatmatarihi?: SortOrder
    silindi?: SortOrder
  }

  export type destekalAvgOrderByAggregateInput = {
    id?: SortOrder
    kapand_?: SortOrder
    silindi?: SortOrder
  }

  export type destekalMaxOrderByAggregateInput = {
    id?: SortOrder
    adsoyad?: SortOrder
    tcno?: SortOrder
    telefon?: SortOrder
    adres?: SortOrder
    konu?: SortOrder
    tarih?: SortOrder
    durum?: SortOrder
    kapand_?: SortOrder
    kapatan?: SortOrder
    kapatanaciklama?: SortOrder
    kapatmatarihi?: SortOrder
    silindi?: SortOrder
  }

  export type destekalMinOrderByAggregateInput = {
    id?: SortOrder
    adsoyad?: SortOrder
    tcno?: SortOrder
    telefon?: SortOrder
    adres?: SortOrder
    konu?: SortOrder
    tarih?: SortOrder
    durum?: SortOrder
    kapand_?: SortOrder
    kapatan?: SortOrder
    kapatanaciklama?: SortOrder
    kapatmatarihi?: SortOrder
    silindi?: SortOrder
  }

  export type destekalSumOrderByAggregateInput = {
    id?: SortOrder
    kapand_?: SortOrder
    silindi?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type destekolCountOrderByAggregateInput = {
    id?: SortOrder
    adsoyad?: SortOrder
    isyeri?: SortOrder
    meslek?: SortOrder
    yas?: SortOrder
    telefon?: SortOrder
    adres?: SortOrder
    konu?: SortOrder
    aciklama?: SortOrder
    tarih?: SortOrder
    durum?: SortOrder
    kapand_?: SortOrder
    kapatan?: SortOrder
    kapatanaciklama?: SortOrder
    kapatmatarihi?: SortOrder
    silindi?: SortOrder
  }

  export type destekolAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type destekolMaxOrderByAggregateInput = {
    id?: SortOrder
    adsoyad?: SortOrder
    isyeri?: SortOrder
    meslek?: SortOrder
    yas?: SortOrder
    telefon?: SortOrder
    adres?: SortOrder
    konu?: SortOrder
    aciklama?: SortOrder
    tarih?: SortOrder
    durum?: SortOrder
    kapand_?: SortOrder
    kapatan?: SortOrder
    kapatanaciklama?: SortOrder
    kapatmatarihi?: SortOrder
    silindi?: SortOrder
  }

  export type destekolMinOrderByAggregateInput = {
    id?: SortOrder
    adsoyad?: SortOrder
    isyeri?: SortOrder
    meslek?: SortOrder
    yas?: SortOrder
    telefon?: SortOrder
    adres?: SortOrder
    konu?: SortOrder
    aciklama?: SortOrder
    tarih?: SortOrder
    durum?: SortOrder
    kapand_?: SortOrder
    kapatan?: SortOrder
    kapatanaciklama?: SortOrder
    kapatmatarihi?: SortOrder
    silindi?: SortOrder
  }

  export type destekolSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type bilgi_telefonCountOrderByAggregateInput = {
    id?: SortOrder
    birim?: SortOrder
    telefon?: SortOrder
    aciklama?: SortOrder
    ekleyen?: SortOrder
    eklenmetarihi?: SortOrder
    onay?: SortOrder
  }

  export type bilgi_telefonAvgOrderByAggregateInput = {
    id?: SortOrder
    onay?: SortOrder
  }

  export type bilgi_telefonMaxOrderByAggregateInput = {
    id?: SortOrder
    birim?: SortOrder
    telefon?: SortOrder
    aciklama?: SortOrder
    ekleyen?: SortOrder
    eklenmetarihi?: SortOrder
    onay?: SortOrder
  }

  export type bilgi_telefonMinOrderByAggregateInput = {
    id?: SortOrder
    birim?: SortOrder
    telefon?: SortOrder
    aciklama?: SortOrder
    ekleyen?: SortOrder
    eklenmetarihi?: SortOrder
    onay?: SortOrder
  }

  export type bilgi_telefonSumOrderByAggregateInput = {
    id?: SortOrder
    onay?: SortOrder
  }

  export type bilgi_webCountOrderByAggregateInput = {
    id?: SortOrder
    birim?: SortOrder
    web?: SortOrder
    aciklama?: SortOrder
    ekleyen?: SortOrder
    eklenmetarihi?: SortOrder
    onay?: SortOrder
  }

  export type bilgi_webAvgOrderByAggregateInput = {
    id?: SortOrder
    onay?: SortOrder
  }

  export type bilgi_webMaxOrderByAggregateInput = {
    id?: SortOrder
    birim?: SortOrder
    web?: SortOrder
    aciklama?: SortOrder
    ekleyen?: SortOrder
    eklenmetarihi?: SortOrder
    onay?: SortOrder
  }

  export type bilgi_webMinOrderByAggregateInput = {
    id?: SortOrder
    birim?: SortOrder
    web?: SortOrder
    aciklama?: SortOrder
    ekleyen?: SortOrder
    eklenmetarihi?: SortOrder
    onay?: SortOrder
  }

  export type bilgi_webSumOrderByAggregateInput = {
    id?: SortOrder
    onay?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAccountInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountNestedInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    upsert?: UserUpsertWithoutAccountInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
  }

  export type UserCreateNestedOneWithoutSessionInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutSessionNestedInput = {
    create?: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionInput
    upsert?: UserUpsertWithoutSessionInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type AccountCreateWithoutUserInput = {
    id: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: Enumerable<AccountCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountScalarWhereInput = {
    AND?: Enumerable<AccountScalarWhereInput>
    OR?: Enumerable<AccountScalarWhereInput>
    NOT?: Enumerable<AccountScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutAccountInput = {
    id: string
    name?: string | null
    pertcno?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    Session?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountInput = {
    id: string
    name?: string | null
    pertcno?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    Session?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
  }

  export type UserUpsertWithoutAccountInput = {
    update: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
  }

  export type UserUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pertcno?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pertcno?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Session?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionInput = {
    id: string
    name?: string | null
    pertcno?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    Account?: AccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionInput = {
    id: string
    name?: string | null
    pertcno?: string | null
    password?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    Account?: AccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpsertWithoutSessionInput = {
    update: XOR<UserUpdateWithoutSessionInput, UserUncheckedUpdateWithoutSessionInput>
    create: XOR<UserCreateWithoutSessionInput, UserUncheckedCreateWithoutSessionInput>
  }

  export type UserUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pertcno?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Account?: AccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pertcno?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Account?: AccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountCreateManyUserInput = {
    id: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id: string
    sessionToken: string
    expires: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}